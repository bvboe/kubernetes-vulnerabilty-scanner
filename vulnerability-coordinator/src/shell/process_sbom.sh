#!/bin/bash
SCAN_DIRECTORY=$1
echo Scan directory: $SCAN_DIRECTORY
cd $SCAN_DIRECTORY

SBOM=sbom.json

echo Check if sbom is there
if [[ ! -e "$SBOM" || ! -s "$SBOM" ]]; then
  echo "SBMOM file $SBOM doesn't exist, returning"
  exit 1
fi

SBOM_SHORT=sbom-short.json
SBOM_SUMMARY_FILE=sbom-summary.json
VULNERABILITY_SCAN_FULL=vulnerability-scan-full.json
VULNERABILITY_SCAN_SHORT=vulnerability-scan-short.json
VULNERABILITY_SCAN_SUMMARY=vulnerability-scan-summary.json
STATUS=status.txt

rm -fr tmp
mkdir tmp
cd tmp
cp ../$SBOM .

echo Rum vulnerability scan on SBOM $SBOM
grype sbom:$SBOM --output json >  $VULNERABILITY_SCAN_FULL

echo Generate compact SBOM
cat $SBOM | \
    jq '.artifacts | map (
                    {
                        name: .name,
                        version: .version,
                        type: .type
                    }
                    )' > $SBOM_SHORT

number_of_packages=`cat $SBOM_SHORT | jq -c '.[]' | wc -l`
distro=`cat $SBOM | jq -c '.distro'`

echo Generate SBOM summary
sbom_summary="{\"number_of_packages\": $number_of_packages, \"distro\": $distro}"
echo $sbom_summary | jq > $SBOM_SUMMARY_FILE

echo Generate compact vulnerability list
cat $VULNERABILITY_SCAN_FULL | \
    jq '.matches | map(
                    {
                        artifact: {
                            name: .artifact.name,
                            version: .artifact.version,
                            type: .artifact.type
                        },
                        vulnerability: {
                            id: .vulnerability.id,
                            severity: .vulnerability.severity,
                            fix: .vulnerability.fix
                        }
                    }
                    )' | jq 'unique' > $VULNERABILITY_SCAN_SHORT

echo Generate vulnerability summary
critical_cves=`jq '[.[] | select(.vulnerability.severity == "Critical")] | length' $VULNERABILITY_SCAN_SHORT`
high_cves=`jq '[.[] | select(.vulnerability.severity == "High")] | length' $VULNERABILITY_SCAN_SHORT`
medium_cves=`jq '[.[] | select(.vulnerability.severity == "Medium")] | length' $VULNERABILITY_SCAN_SHORT`
low_cves=`jq '[.[] | select(.vulnerability.severity == "Low")] | length' $VULNERABILITY_SCAN_SHORT`
negligible_cves=`jq '[.[] | select(.vulnerability.severity == "Negligible")] | length' $VULNERABILITY_SCAN_SHORT`
unknown_cves=`jq '[.[] | select(.vulnerability.severity == "Unknown")] | length' $VULNERABILITY_SCAN_SHORT`

status_fixed=`jq '[.[] | select(.vulnerability.fix.state == "fixed")] | length' $VULNERABILITY_SCAN_SHORT`
status_not_fixed=`jq '[.[] | select(.vulnerability.fix.state == "not-fixed")] | length' $VULNERABILITY_SCAN_SHORT`
status_wont_fix=`jq '[.[] | select(.vulnerability.fix.state == "wont-fix")] | length' $VULNERABILITY_SCAN_SHORT`
status_unknown=`jq '[.[] | select(.vulnerability.fix.state == "unknown")] | length' $VULNERABILITY_SCAN_SHORT`

vulnerability_summary="{ \"by_severity\": {
                            \"critical\": $critical_cves,
                            \"high\": $high_cves,
                            \"medium\": $medium_cves,
                            \"low\": $low_cves,
                            \"negligible\": $negligible_cves,
                            \"unknown\": $unknown_cves
                        },
                        \"by_status\": {
                            \"fixed\": $status_fixed,
                            \"not_fixed\": $status_not_fixed,
                            \"wont_fix\": $status_wont_fix,
                            \"unknown\": $status_unknown
                        },
                        \"number_of_packages\": $number_of_packages}"

echo $vulnerability_summary | jq > $VULNERABILITY_SCAN_SUMMARY

echo Done, copying back result
echo -n "COMPLETE" > $STATUS
mv * ..
cd ..
rm -fr tmp

echo Done!
