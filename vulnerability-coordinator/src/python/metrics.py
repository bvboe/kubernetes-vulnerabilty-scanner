from vulnerability_coordinator import RUNNING_CONTAINERS
from file_manager import load_vulnerability_scan, load_scan_status

def gauge_map_to_string(name, gauge_map, property_keys):
    print(f"gauge_map_to_string({name}, ...)")
    result = []
    for key_tuple, value in gauge_map.items():
        property_string = ""
        for property_key, property_value in zip(property_keys, key_tuple):
            if len(property_string) > 0:
                property_string = property_string + ", "
            property_string = property_string + property_key + "=\"" + property_value + "\""
        gauge_item = name + "{" + property_string + "} " + str(value)
        result.append(gauge_item)

    return result

def increment_map_counter(map, key):
    if key in map:
        counter = map[key]
        counter = counter + 1
        map[key] = counter
    else:
        map[key] = 1

def generate_metrics():
    print("generate_metrics")

    container_instances_gauge_map = {}
    short_vulnerability_gauge_map = {}
    full_vulnerability_gauge_map = {}
    
    for container, container_image in RUNNING_CONTAINERS.items():
        namespace = container.namespace
        #pod_name = container.pod_name
        #container_name = container.container_name
        image = container_image.image
        #image_id = container_image.image_id
        scan_status = load_scan_status(container_image.image_id)
        if scan_status == "COMPLETE":
            container_instance_gauge_key = (
                namespace,
                image,
            )
            increment_map_counter(container_instances_gauge_map, container_instance_gauge_key)

            vulnerability_scan = load_vulnerability_scan(container_image.image_id)
            for scan_item in vulnerability_scan:
                vulnerability_id = scan_item['vulnerability']['id']
                severity = scan_item['vulnerability']['severity']
                fix_state = scan_item['vulnerability']['fix']['state']
                short_vulnerability_scan_key = (
                    namespace,
                    severity
                )
                increment_map_counter(short_vulnerability_gauge_map, short_vulnerability_scan_key)

                full_vulnerability_scan_key = (
                    namespace,
                    image,
                    vulnerability_id,
                    severity,
                    fix_state
                )
                increment_map_counter(full_vulnerability_gauge_map, full_vulnerability_scan_key)

    result = []
    result.extend(gauge_map_to_string("kubernetes_vulnerability_running_containers", container_instances_gauge_map, ("namespace", "image")))
    result.extend(gauge_map_to_string("kubernetes_vulnerability_short", short_vulnerability_gauge_map, ("namespace", "severity")))
    result.extend(gauge_map_to_string("kubernetes_vulnerability_full", full_vulnerability_gauge_map, ("namespace", "image", "vulnerability_id", "severity", "fix_state")))
    return result
    