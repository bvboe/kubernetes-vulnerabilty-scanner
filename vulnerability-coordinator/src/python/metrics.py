from vulnerability_coordinator import RUNNING_CONTAINER_CACHE, RUNNING_NODE_CACHE
from file_manager import load_vulnerability_scan, load_scan_status, load_sbom, get_distro_name
import os
import itertools

CLUSTER_NAME=os.getenv("CLUSTER_NAME")
CONTAINER_METRIC_TYPE = "CONTAINER"
HOST_METRIC_TYPE = "HOST"

def generate_standard_property_string():
    #Todo - rewrite to handle more properties in the future
    return "cluster_name=\"" + CLUSTER_NAME + "\""

def gauge_map_to_string(name, gauge_map, property_keys):
    #print(f"gauge_map_to_string({name}, ...)")
    result = []
    for key_tuple, value in gauge_map.items():
        property_string = generate_standard_property_string()
        for property_key, property_value in zip(property_keys, key_tuple):
            property_string = property_string + ", " + property_key + "=\"" + property_value + "\""
        gauge_item = name + "{" + property_string + "} " + str(value)
        result.append(gauge_item)

    return result

def increment_map_counter(map, key):
    if key in map:
        counter = map[key]
        counter = counter + 1
        map[key] = counter
    else:
        map[key] = 1

def generate_metrics():
    container_metrics = generate_container_metrics()
    host_metrics = generate_host_metrics()
    return list(itertools.chain(container_metrics, host_metrics))

def generate_container_metrics():
    print("generate_container_metrics")

    container_instances_gauge_map = {}
    container_vulnerability_gauge_map = {}
    container_sbom_gauge_map = {}
    
    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        namespace = container.namespace
        image = container_image.image
        image_id = container_image.image_id
        scan_status = load_scan_status(image_id)
        distro_name = get_distro_name(image_id)
        cluster_name_namespace = CLUSTER_NAME + "." + namespace
        cluster_name_namespace_image = cluster_name_namespace + "." + image
        cluster_name_namespace_image_id = cluster_name_namespace + "." + image_id
        if scan_status == "COMPLETE":
            container_instance_gauge_key = (
                CONTAINER_METRIC_TYPE,
                cluster_name_namespace,
                cluster_name_namespace_image,
                cluster_name_namespace_image_id,
                namespace,
                image,
                image_id,
                distro_name
            )
            increment_map_counter(container_instances_gauge_map, container_instance_gauge_key)

            vulnerability_scan = load_vulnerability_scan(image_id)
            for scan_item in vulnerability_scan:
                vulnerability_id = scan_item['vulnerability']['id']
                severity = scan_item['vulnerability']['severity']
                fix_state = scan_item['vulnerability']['fix']['state']

                container_vulnerability_scan_key = (
                    CONTAINER_METRIC_TYPE,
                    cluster_name_namespace,
                    cluster_name_namespace_image,
                    cluster_name_namespace_image_id,
                    namespace,
                    image,
                    image_id,
                    distro_name,
                    vulnerability_id,
                    severity,
                    fix_state
                )
                increment_map_counter(container_vulnerability_gauge_map, container_vulnerability_scan_key)

            sbom = load_sbom(image_id)
            for sbom_item in sbom:
                name = sbom_item['name']
                version = sbom_item['version']
                type = sbom_item['type']
                container_sbom_key = (
                    CONTAINER_METRIC_TYPE,
                    cluster_name_namespace,
                    cluster_name_namespace_image,
                    cluster_name_namespace_image_id,
                    namespace,
                    name,
                    version,
                    type
                )
                increment_map_counter(container_sbom_gauge_map, container_sbom_key)

    result = []
    result.extend(gauge_map_to_string("kubernetes_vulnerability_scanned_containers", container_instances_gauge_map, (
        "metric_type",
        "cluster_name_namespace",
        "cluster_name_namespace_image",
        "cluster_name_namespace_image_id",
        "namespace", 
        "image",
        "image_id",
        "distro_name"
        )))
    result.extend(gauge_map_to_string("kubernetes_vulnerability_results", container_vulnerability_gauge_map, (
        "metric_type",
        "cluster_name_namespace",
        "cluster_name_namespace_image",
        "cluster_name_namespace_image_id",
        "namespace", 
        "image", 
        "image_id",
        "distro_name",
        "vulnerability_id", 
        "severity", 
        "fix_state"
        )))
    result.extend(gauge_map_to_string("kubernetes_vulnerability_sbom", container_sbom_gauge_map, (
        "metric_type",
        "cluster_name_namespace",
        "cluster_name_namespace_image",
        "cluster_name_namespace_image_id",
        "namespace", 
        "name", 
        "version", 
        "type"
        )))
    return result
    
def generate_host_metrics():
    print("generate_host_metrics")

    host_instances_gauge_map = {}
    host_vulnerability_gauge_map = {}
    host_sbom_gauge_map = {}
    
    for host_name in RUNNING_NODE_CACHE.get_copy():
        scan_status = load_scan_status(host_name)
        if scan_status == "COMPLETE":
            distro_name = get_distro_name(host_name)
            cluster_name_hostname = CLUSTER_NAME + "." + host_name
            host_instance_gauge_key = (
                HOST_METRIC_TYPE,
                cluster_name_hostname,
                host_name,
                distro_name
            )
            increment_map_counter(host_instances_gauge_map, host_instance_gauge_key)

            vulnerability_scan = load_vulnerability_scan(host_name)
            for scan_item in vulnerability_scan:
                vulnerability_id = scan_item['vulnerability']['id']
                severity = scan_item['vulnerability']['severity']
                fix_state = scan_item['vulnerability']['fix']['state']

                host_vulnerability_scan_key = (
                    HOST_METRIC_TYPE,
                    cluster_name_hostname,
                    host_name,
                    distro_name,
                    vulnerability_id,
                    severity,
                    fix_state
                )
                increment_map_counter(host_vulnerability_gauge_map, host_vulnerability_scan_key)

            sbom = load_sbom(host_name)
            for sbom_item in sbom:
                name = sbom_item['name']
                version = sbom_item['version']
                type = sbom_item['type']
                host_sbom_key = (
                    HOST_METRIC_TYPE,
                    cluster_name_hostname,
                    host_name,
                    name,
                    version,
                    type
                )
                increment_map_counter(host_sbom_gauge_map, host_sbom_key)

    result = []
    result.extend(gauge_map_to_string("kubernetes_vulnerability_scanned_containers", host_instances_gauge_map, (
        "metric_type",
        "cluster_name_host_name",
        "host_name", 
        "distro_name"
        )))
    result.extend(gauge_map_to_string("kubernetes_vulnerability_results", host_vulnerability_gauge_map, (
        "metric_type",
        "cluster_name_host_name",
        "host_name", 
        "distro_name"
        "vulnerability_id", 
        "severity", 
        "fix_state"
        )))
    result.extend(gauge_map_to_string("kubernetes_vulnerability_sbom", host_sbom_gauge_map, (
        "metric_type",
        "cluster_name_host_name",
        "host_name", 
        "name", 
        "version", 
        "type"
        )))
    return result
