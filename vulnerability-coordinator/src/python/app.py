from flask import Flask, request, Response
import os
import json
from vulnerability_coordinator import init_scanner, get_vulnerability_summary_by_container, get_namespaces, get_vulnerability_summary_by_cve, get_sbom_summary, get_pod_summary, get_image_details, get_image_vulnerabilties, get_image_sbom, rescan_all_images, reset_scanner_cache, get_image_summary, get_distro_summary
import csv
import io
from metrics import generate_metrics

POD_NAMESPACE=os.getenv("POD_NAMESPACE")
CLUSTER_NAME=os.getenv("CLUSTER_NAME")

print(f"Starting Vulnerability Coordinator")

init_scanner()
app = Flask(__name__)

def generate_csv_response(file_name, header_row, data_collection, to_csv_row_function):
    print("generate_csv_response({file_name}...)")
    buffer = io.StringIO()
    writer = csv.writer(buffer)

    # Write header row
    writer.writerow(header_row)

    # Write data        
    for row in data_collection:
        csv_row = to_csv_row_function(row)
        writer.writerow(csv_row)

    csv_data = buffer.getvalue()
    buffer.close()
    response = Response(csv_data, mimetype='text/csv')
    response.headers["Content-Disposition"] = "attachment; filename=" + file_name
    return response

@app.route("/api/")
def api_root():
    result = {
        "result": "success"
    }
    print(f"api_root: {result}")
    return result

@app.route("/api/clustername")
def cluster_name():
    print(f"clustername: {CLUSTER_NAME}")
    return CLUSTER_NAME

@app.route("/api/namespaces")
def namespaces():
    print("namespaces()")
    return get_namespaces()

def vulnerability_summary_container_row_to_csv(row):
    if row['scan_status'] == "COMPLETE":
        return [
                    row['image'],
                    row['image_id'],
                    row['num_container_instances'],
                    row['scan_status'],
                    row['vulnarbility_summary']['by_severity']['critical'],
                    row['vulnarbility_summary']['by_severity']['high'],
                    row['vulnarbility_summary']['by_severity']['medium'],
                    row['vulnarbility_summary']['by_severity']['low'],
                    row['vulnarbility_summary']['by_severity']['negligible'],
                    row['vulnarbility_summary']['by_severity']['unknown'],
                    row['vulnarbility_summary']['by_status']['fixed'],
                    row['vulnarbility_summary']['by_status']['not_fixed'],
                    row['vulnarbility_summary']['by_status']['unknown'],
                    row['vulnarbility_summary']['by_status']['wont_fix'],
                    row['vulnarbility_summary']['number_of_packages']
                ]
    else:
        return [
                    row['image'],
                    row['image_id'],
                    row['num_container_instances'],
                    row['scan_status']
                ]

@app.route("/api/vulnsummary/container")
def vulnerability_summary_container():
    namespace = request.args.get('namespace')
    output = request.args.get('output')
    print(f"vulnerability_summary_container({namespace}, {output})")
    result = get_vulnerability_summary_by_container(namespace)
    if output == "csv":
        header_row = ["image", 
                        "image_id", 
                        "num_container_instances", 
                        "scan_status", 
                        "cves_critical", 
                        "cves_high", 
                        "cves_medium", 
                        "cves_low", 
                        "cves_negligible", 
                        "cves_unknown", 
                        "status_fixed", 
                        "status_not_fixed", 
                        "status_unknown", 
                        "status_wont_fix", 
                        "number_of_packages"
                        ]        
        return generate_csv_response("container-summary.csv", header_row, result, vulnerability_summary_container_row_to_csv)
    else:
        return result

def vulnerability_summary_cve_row_to_csv(row):
    return [
                row['vulnerability_severity'],
                row['vulnerability_id'],
                row['artifact_name'],
                row['artifact_version'],
                row['vulnerability_fix_versions'],
                row['vulnerability_fix_state'],
                row['artifact_type'],
                row['image_count']
            ]

@app.route("/api/vulnsummary/cve")
def vulnerability_summary_cve():
    namespace = request.args.get('namespace')
    output = request.args.get('output')
    print(f"vulnerability_summary_cve({namespace}, {output})")
    result = get_vulnerability_summary_by_cve(namespace)

    if output == "csv":
        header_row = [
                    "vulnerability_severity",
                    "vulnerability_id",
                    "artifact_name",
                    "artifact_version",
                    "vulnerability_fix_versions",
                    "vulnerability_fix_state",
                    "artifact_type",
                    "image_count"
                    ]        
        return generate_csv_response("cve-summary.csv", header_row, result, vulnerability_summary_cve_row_to_csv)
    else:
        return result


def pod_summary_row_to_csv(row):
    if row['scan_status'] == "COMPLETE":
        return [
                    row['namespace'],
                    row['pod_name'],
                    row['container_name'],
                    row['image'],
                    row['image_id'],
                    row['scan_status'],
                    row['vulnarbility_summary']['by_severity']['critical'],
                    row['vulnarbility_summary']['by_severity']['high'],
                    row['vulnarbility_summary']['by_severity']['medium'],
                    row['vulnarbility_summary']['by_severity']['low'],
                    row['vulnarbility_summary']['by_severity']['negligible'],
                    row['vulnarbility_summary']['by_severity']['unknown'],
                    row['vulnarbility_summary']['by_status']['fixed'],
                    row['vulnarbility_summary']['by_status']['not_fixed'],
                    row['vulnarbility_summary']['by_status']['unknown'],
                    row['vulnarbility_summary']['by_status']['wont_fix'],
                    row['vulnarbility_summary']['number_of_packages']
                ]
    else:
        return [
                    row['namespace'],
                    row['pod_name'],
                    row['container_name'],
                    row['image'],
                    row['image_id'],
                    row['scan_status']
                ]

@app.route("/api/podsummary")
def pod_summary():
    namespace = request.args.get('namespace')
    output = request.args.get('output')
    print(f"pod_summary({namespace}, {output})")

    result = get_pod_summary(namespace)
    if output == "csv":
        header_row = [
                        "namespace",
                        "pod_name",
                        "container_name",
                        "image", 
                        "image_id", 
                        "scan_status", 
                        "cves_critical", 
                        "cves_high", 
                        "cves_medium", 
                        "cves_low", 
                        "cves_negligible", 
                        "cves_unknown", 
                        "status_fixed", 
                        "status_not_fixed", 
                        "status_unknown", 
                        "status_wont_fix", 
                        "number_of_packages"
                        ]        
        return generate_csv_response("pod-summary.csv", header_row, result, pod_summary_row_to_csv)
    else:
        return result

def sbom_summary_row_to_csv(row):
    return [
                row['name'],
                row['version'],
                row['type'],
                row['image_count']
            ]

@app.route("/api/sbomsummary")
def sbom_summary():
    namespace = request.args.get('namespace')
    output = request.args.get('output')
    print(f"sbom_summary({namespace}, {output})")
    result = get_sbom_summary(namespace)

    if output == "csv":
        header_row = [
                        "name",
                        "version",
                        "type",
                        "image_count" 
                        ]        
        return generate_csv_response("sbom-summary.csv", header_row, result, sbom_summary_row_to_csv)
    else:
        return result

@app.route("/api/hello")
def api_say_hello():
    result = {
        "result": "success"
    }
    strresult=json.dumps(result)
    print(f"api_say_hello: {strresult}")
    return strresult

@app.route("/api/image/details")
def api_image_details():
    image_id = request.args.get('imageid')
    print(f"api_image_details({image_id})")
    return get_image_details(image_id)

def image_vulnerabilities_row_to_csv(row):
    return [
                row['vulnerability_severity'],
                row['vulnerability_id'],
                row['artifact_name'],
                row['artifact_version'],
                row['vulnerability_fix_versions'],
                row['vulnerability_fix_state'],
                row['artifact_type']
            ]

@app.route("/api/image/vulnerabilities")
def api_image_vulnerabilities():
    image_id = request.args.get('imageid')
    output = request.args.get('output')
    print(f"api_image_vulnerabilities({image_id} {output})")
    if image_id is None:
        return []

    result = get_image_vulnerabilties(image_id)

    if output == "csv":
        header_row = [
                    "vulnerability_severity",
                    "vulnerability_id",
                    "artifact_name",
                    "artifact_version",
                    "vulnerability_fix_versions",
                    "vulnerability_fix_state",
                    "artifact_type"
                    ]        
        return generate_csv_response("image-cve-summary.csv", header_row, result, image_vulnerabilities_row_to_csv)
    else:
        return result

def api_image_summary_row_to_csv(row):
    return [
                row['namespace'],
                row['scanned_images'],
                row['not_scanned_images'],
                row['cves_critical'],
                row['cves_high'],
                row['cves_medium'],
                row['cves_low'],
                row['cves_negligible'],
                row['cves_unknown'],
                row['number_of_packages']
            ]

@app.route("/api/image/summary")
def api_image_summary():
    namespace = request.args.get('namespace')
    output = request.args.get('output')
    print(f"api_image_summary({namespace} {output})")
    result = get_image_summary(namespace)

    if output == "csv":
        header_row = [
                    "namespace",
                    "scanned_images",
                    "not_scanned_images",
                    "cves_critical",
                    "cves_high",
                    "cves_medium",
                    "cves_low",
                    "cves_negligible",
                    "cves_unknown",
                    "number_of_packages"
                    ]        
        return generate_csv_response("image-namespace-summary.csv", header_row, result, api_image_summary_row_to_csv)
    else:
        return result

def api_distro_summary_row_to_csv(row):
    return [
                row['distro_name'],
                row['distro_id'],
                row['scanned_images'],
                row['cves_critical'],
                row['cves_high'],
                row['cves_medium'],
                row['cves_low'],
                row['cves_negligible'],
                row['cves_unknown'],
                row['number_of_packages']
            ]

@app.route("/api/distro/summary")
def api_distro_summary():
    namespace = request.args.get('namespace')
    output = request.args.get('output')
    print(f"api_distro_summary({namespace} {output})")
    result = get_distro_summary(namespace)

    if output == "csv":
        header_row = [
                    "distro_name",
                    "distro_id",
                    "scanned_images",
                    "cves_critical",
                    "cves_high",
                    "cves_medium",
                    "cves_low",
                    "cves_negligible",
                    "cves_unknown",
                    "number_of_packages"
                    ]        
        return generate_csv_response("distro-summary.csv", header_row, result, api_distro_summary_row_to_csv)
    else:
        return result

def image_sbom_row_to_csv(row):
    return [
                row['name'],
                row['version'],
                row['type']
            ]

@app.route("/api/image/sbom")
def api_image_sbom():
    image_id = request.args.get('imageid')
    output = request.args.get('output')
    print(f"api_image_sbom({image_id}, {output})")
    if image_id is None:
        return []

    result = get_image_sbom(image_id)

    if output == "csv":
        header_row = [
                        "name",
                        "version",
                        "type"
                    ]        
        return generate_csv_response("image-sbom-summary.csv", header_row, result, image_sbom_row_to_csv)
    else:
        return result

@app.route("/")
def index():
    print("index()")
    return "Congratulations, app up and running!\n"

@app.route("/api/admin/refreshcache")
def api_admin_resfresh_cache():
    print("api_admin_refresh_cache()")
    reset_scanner_cache()
    return "Started refresh"

@app.route("/api/admin/rescanimages")
def api_admin_rescan_images():
    print("api_admin_rescan_images()")
    rescan_all_images()
    return "Started scan"

@app.route("/metrics")
def api_metrics():
    print("api_metrics")
    result = generate_metrics()
    return "\n".join(result)
