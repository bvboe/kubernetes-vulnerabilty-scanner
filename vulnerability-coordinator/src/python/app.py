from flask import Flask, request
import os
import json
from vulnerability_coordinator import init_scanner, get_vulnerability_summary_by_container, get_namespaces, get_vulnerability_summary_by_cve, get_sbom_summary, get_pod_summary, get_image_summary, get_image_vulnerabilties, get_image_sbom, rescan_all_images, reset_scanner_cache

POD_NAMESPACE=os.getenv("POD_NAMESPACE")

print(f"Starting Vulnerability Coordinator")

init_scanner()
app = Flask(__name__)

@app.route("/api/")
def api_root():
    result = {
        "result": "success"
    }
    print(f"api_root: {result}")
    return result

@app.route("/api/namespaces")
def namespaces():
    print("namespaces()")
    return get_namespaces()

@app.route("/api/vulnsummary/container")
def vulnerability_summary_container():
    namespace = request.args.get('namespace')
    print(f"vulnerability_summary_container_ii({namespace})")
    return get_vulnerability_summary_by_container(namespace)

@app.route("/api/vulnsummary/cve")
def vulnerability_summary_cve():
    namespace = request.args.get('namespace')
    print(f"vulnerability_summary_cve({namespace})")
    return get_vulnerability_summary_by_cve(namespace)

@app.route("/api/podsummary")
def pod_summary():
    namespace = request.args.get('namespace')
    print(f"pod_summary({namespace})")
    return get_pod_summary(namespace)

@app.route("/api/sbomsummary")
def sbom_summary():
    namespace = request.args.get('namespace')
    print(f"sbom_summary({namespace})")
    return get_sbom_summary(namespace)

@app.route("/api/hello")
def api_say_hello():
    result = {
        "result": "success"
    }
    strresult=json.dumps(result)
    print(f"api_say_hello: {strresult}")
    return strresult

@app.route("/api/image/summary")
def api_image_summary():
    image_id = request.args.get('imageid')
    print(f"api_image_summary({image_id})")
    return get_image_summary(image_id)

@app.route("/api/image/vulnerabilities")
def api_image_vulnerabilities():
    image_id = request.args.get('imageid')
    print(f"api_image_vulnerabilities({image_id})")
    if image_id is None:
        return []

    result = get_image_vulnerabilties(image_id)
    result.sort(key=sort_vulnerability_summary_cve)
    return result

@app.route("/api/image/sbom")
def api_image_sbom():
    image_id = request.args.get('imageid')
    print(f"api_image_sbom({image_id})")
    if image_id is None:
        return []

    return get_image_sbom(image_id)

@app.route("/")
def index():
    print("index()")
    return "Congratulations, app up and running!\n"

@app.route("/api/admin/refreshcache")
def api_admin_resfresh_cache():
    print("api_admin_refresh_cache()")
    reset_scanner_cache()
    return "Started refresh"

@app.route("/api/admin/rescanimages")
def api_admin_rescan_images():
    print("api_admin_rescan_images()")
    rescan_all_images()
    return "Started scan"
