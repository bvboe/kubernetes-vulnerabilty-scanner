from flask import Flask, request
import os
import json
from vulnerability_coordinator import init_scanner, get_vulnerability_summary_by_container, get_namespaces, get_vulnerability_summary_by_cve, get_sbom_summary, get_pod_summary, get_image_summary, get_image_vulnerabilties, get_image_sbom, rescan_all_images, reset_scanner_cache

POD_NAMESPACE=os.getenv("POD_NAMESPACE")

print(f"Starting Vulnerability Coordinator")

init_scanner()
app = Flask(__name__)

@app.route("/api/")
def api_root():
    result = {
        "result": "success"
    }
    strresult=json.dumps(result)
    print(f"api_root: {strresult}")
    return strresult

@app.route("/api/namespaces")
def namespaces():
    print("namespaces()")
    result = get_namespaces()
    result.sort()
    return get_namespaces()

def sort_vulnerability_summary_container(item):
    mapping={
        "COMPLETE": "1",
        "SCANNING": "2",
        "NO_SCAN_AVAILABLE": "3",
        "SCAN_FAILED": "4",
        "TO_BE_SCANNED": "5"
    }

    return mapping[item['scan_status']] + item['image']

@app.route("/api/vulnsummary/container")
def vulnerability_summary_container():
    namespace = request.args.get('namespace')
    print(f"vulnerability_summary_container_ii({namespace})")
    data = get_vulnerability_summary_by_container(namespace)

    data.sort(key=sort_vulnerability_summary_container)
    return data

def sort_vulnerability_summary_cve(item):
    mapping={
        "Critical": "1",
        "High": "2",
        "Medium": "3",
        "Low": "4",
        "Negligible": "5",
        "Unknown": "6"
    }

    return mapping[item['vulnerability_severity']]+item['vulnerability_id']+item['artifact_name']+item['artifact_version']

@app.route("/api/vulnsummary/cve")
def vulnerability_summary_cve():
    namespace = request.args.get('namespace')
    print(f"vulnerability_summary_cve({namespace})")

    result = get_vulnerability_summary_by_cve(namespace)
    result.sort(key=sort_vulnerability_summary_cve)
    return result

def sort_pod_summary(item):
    return item['namespace']+item['pod_name']+item['container_name']

@app.route("/api/podsummary")
def pod_summary():
    namespace = request.args.get('namespace')
    print(f"pod_summary({namespace})")

    data = get_pod_summary(namespace)
    complete_data = []
    incomplete_data = []
    for row in data:
        r = row['vulnarbility_summary']
        if r == {}:
            #Incomplete data
            incomplete_data.append(row)
        else:
            #Has vuln data
            complete_data.append(row)

    complete_data.sort(key=sort_pod_summary)
    incomplete_data.sort(key=sort_pod_summary)

    complete_data.extend(incomplete_data)
    return complete_data

def sort_sbom_summary(item):
    return (item['name']+item['version']).lower();

@app.route("/api/sbomsummary")
def sbom_summary():
    namespace = request.args.get('namespace')
    print(f"sbom_summary({namespace})")

    result = get_sbom_summary(namespace)
    result.sort(key=sort_sbom_summary)
    return result

@app.route("/api/hello")
def api_say_hello():
    result = {
        "result": "success"
    }
    strresult=json.dumps(result)
    print(f"api_say_hello: {strresult}")
    return strresult

@app.route("/api/image/summary")
def api_image_summary():
    image_id = request.args.get('imageid')
    print(f"api_image_summary({image_id})")
    if image_id is None:
        return {}

    result = get_image_summary(image_id)
    if result == {}:
        return {}
    else:
        repositories = result['repositories']
        repositories.sort()
        instances = result['instances']
        instances.sort(key=sort_pod_summary)
        return {
            "image_id": result['image_id'],
            "repositories": repositories,
            "instances": instances
        }

@app.route("/api/image/vulnerabilities")
def api_image_vulnerabilities():
    image_id = request.args.get('imageid')
    print(f"api_image_vulnerabilities({image_id})")
    if image_id is None:
        return []

    result = get_image_vulnerabilties(image_id)
    result.sort(key=sort_vulnerability_summary_cve)
    return result

@app.route("/api/image/sbom")
def api_image_sbom():
    image_id = request.args.get('imageid')
    print(f"api_image_sbom({image_id})")
    if image_id is None:
        return []

    result = get_image_sbom(image_id)
    result.sort(key=sort_sbom_summary)
    return result

@app.route("/hello")
def sayHello():
    result = {
        "result": "success"
    }
    strresult=json.dumps(result)
    print(f"SayHello: {strresult}")
    return strresult


@app.route("/")
def index():
    print("Joho!")
    return "Congratulations, it's a web app!\n"

@app.route("/api/admin/refreshcache")
def api_admin_resfresh_cache():
    print("api_admin_refresh_cache()")
    reset_scanner_cache()
    return "Started refresh"

@app.route("/api/admin/rescanimages")
def api_admin_rescan_images():
    print("api_admin_rescan_images()")
    rescan_all_images()
    return "Started scan"
