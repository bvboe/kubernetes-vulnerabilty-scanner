from flask import Flask, request
import os
import json
from vulnerability_coordinator import init_scanner, get_vulnerability_summary_by_container, get_namespaces, get_vulnerability_summary_by_cve, get_sbom_summary, get_pod_summary

POD_NAMESPACE=os.getenv("POD_NAMESPACE")

print(f"Starting Vulnerability Coordinator")

init_scanner()
app = Flask(__name__)

@app.route("/api/")
def api_root():
    result = {
        "result": "success"
    }
    strresult=json.dumps(result)
    print(f"api_root: {strresult}")
    return strresult

@app.route("/api/namespaces")
def namespaces():
    print("namespaces()")
    return json.dumps(get_namespaces())

@app.route("/api/vulnsummary/container")
def vulnerability_summary_container():
    namespace = request.args.get('namespace')
    print(f"vulnerability_summary_container({namespace})")
    result = get_vulnerability_summary_by_container(namespace)
    if result is None:
        return "{}"
    else:
        return json.dumps(result)

@app.route("/api/vulnsummary/cve")
def vulnerability_summary_cve():
    namespace = request.args.get('namespace')
    print(f"vulnerability_summary_cve({namespace})")

    result = get_vulnerability_summary_by_cve(namespace)
    return json.dumps(result)

@app.route("/api/podsummary")
def pod_summary():
    namespace = request.args.get('namespace')
    print(f"pod_summary({namespace})")

    data = get_pod_summary(namespace)
    complete_data = []
    incomplete_data = []
    for row in data:
        r = row['vulnarbility_summary']
        print(r)
        if r == {}:
            #Incomplete data
            incomplete_data.append(row)
        else:
            #Has vuln data
            complete_data.append(row)
            
    complete_data.extend(incomplete_data)
    return json.dumps(complete_data)

@app.route("/api/sbomsummary")
def sbom_summary():
    namespace = request.args.get('namespace')
    print(f"sbom_summary({namespace})")

    result = get_sbom_summary(namespace)
    return json.dumps(result)

@app.route("/api/hello")
def api_say_hello():
    result = {
        "result": "success"
    }
    strresult=json.dumps(result)
    print(f"api_say_hello: {strresult}")
    return strresult


@app.route("/hello")
def sayHello():
    result = {
        "result": "success"
    }
    strresult=json.dumps(result)
    print(f"SayHello: {strresult}")
    return strresult


@app.route("/")
def index():
    print("Joho!")
    return "Congratulations, it's a web app!\n"
