from flask import Flask, request, Response
import os
import json
from vulnerability_coordinator import init_scanner, get_vulnerability_summary_by_container, get_namespaces, get_vulnerability_summary_by_cve, get_sbom_summary, get_pod_summary, get_image_details, get_image_vulnerabilties, get_image_sbom, rescan_all_images, reset_container_cache, get_image_summary, get_container_distro_summary, get_image_scan_status, get_vulnerability_summary_by_node, get_node_distro_summary, get_node_scan_status, get_node_details, reset_node_cache, rescan_all_nodes, get_filters, get_vulnerability_details_by_image, get_vulnerability_details_by_pod, get_vulnerability_summary_by_node_ii, get_vulnerability_summary_by_cve_ii, get_sbom_summary_ii
import csv
import io
from metrics import generate_metrics
from api_cache import ApiCache, NODE_CACHE_TYPE, IMAGE_CACHE_TYPE

POD_NAMESPACE=os.getenv("POD_NAMESPACE")
CLUSTER_NAME=os.getenv("CLUSTER_NAME")
API_CACHE = ApiCache()

print(f"Starting Vulnerability Coordinator")

init_scanner()
app = Flask(__name__)

def generate_csv_response(file_name, header_row, data_collection, to_csv_row_function):
    print("generate_csv_response({file_name}...)")
    buffer = io.StringIO()
    writer = csv.writer(buffer)

    # Write header row
    writer.writerow(header_row)

    # Write data        
    for row in data_collection:
        csv_row = to_csv_row_function(row)
        writer.writerow(csv_row)

    csv_data = buffer.getvalue()
    buffer.close()
    response = Response(csv_data, mimetype='text/csv')
    response.headers["Content-Disposition"] = "attachment; filename=" + file_name
    return response

@app.route("/api/")
def api_root():
    result = {
        "result": "success"
    }
    print(f"api_root: {result}")
    return result

@app.route("/api/clustername")
def cluster_name():
    print(f"clustername: {CLUSTER_NAME}")
    return CLUSTER_NAME

@app.route("/api/namespaces")
def namespaces():
    print("namespaces()")
    return get_namespaces()

def vulnerability_summary_container_row_to_csv(row):
    #Todo - deprecate!
    if row['scan_status'] == "COMPLETE":
        return [
                    row['image'],
                    row['image_id'],
                    row['num_container_instances'],
                    row['scan_status'],
                    row['vulnarbility_summary']['by_severity']['critical'],
                    row['vulnarbility_summary']['by_severity']['high'],
                    row['vulnarbility_summary']['by_severity']['medium'],
                    row['vulnarbility_summary']['by_severity']['low'],
                    row['vulnarbility_summary']['by_severity']['negligible'],
                    row['vulnarbility_summary']['by_severity']['unknown'],
                    row['vulnarbility_summary']['by_status']['fixed'],
                    row['vulnarbility_summary']['by_status']['not_fixed'],
                    row['vulnarbility_summary']['by_status']['unknown'],
                    row['vulnarbility_summary']['by_status']['wont_fix'],
                    row['vulnarbility_summary']['number_of_packages']
                ]
    else:
        return [
                    row['image'],
                    row['image_id'],
                    row['num_container_instances'],
                    row['scan_status']
                ]

@app.route("/api/vulnsummary/container")
def vulnerability_summary_container():
    #Todo - deprecate!
    namespace = request.args.get('namespace')
    output = request.args.get('output')
    print(f"vulnerability_summary_container({namespace}, {output})")
    result = get_vulnerability_summary_by_container(namespace)
    if output == "csv":
        header_row = ["image", 
                        "image_id", 
                        "num_container_instances", 
                        "scan_status", 
                        "cves_critical", 
                        "cves_high", 
                        "cves_medium", 
                        "cves_low", 
                        "cves_negligible", 
                        "cves_unknown", 
                        "status_fixed", 
                        "status_not_fixed", 
                        "status_unknown", 
                        "status_wont_fix", 
                        "number_of_packages"
                        ]        
        return generate_csv_response("container-summary.csv", header_row, result, vulnerability_summary_container_row_to_csv)
    else:
        return result

def request_arg_to_set(arg):
    if arg is not None:
        return set(arg.split(","))
    else:
        return set()
    
def vulnerability_summary_image_row_to_csv(row):
    if row['scan_status'] == "COMPLETE":
        return [
                    row['image'],
                    row['image_id'],
                    row['num_instances'],
                    row['scan_status'],
                    row['vulnarbility_summary']['critical'],
                    row['vulnarbility_summary']['high'],
                    row['vulnarbility_summary']['medium'],
                    row['vulnarbility_summary']['low'],
                    row['vulnarbility_summary']['negligible'],
                    row['vulnarbility_summary']['unknown'],
                    row['number_of_packages']
                ]
    else:
        return [
                    row['image'],
                    row['image_id'],
                    row['num_instances'],
                    row['scan_status']
                ]

@app.route("/api/vulnsummary/image")
def vulnerability_summary_image():
    namespace_filter = request_arg_to_set(request.args.get('namespace'))
    fixstatus_filter = request_arg_to_set(request.args.get('fixstatus'))
    packagetype_filter = request_arg_to_set(request.args.get('packagetype'))
    output = request.args.get('output')
    print(f"vulnerability_summary_image({namespace_filter}, {fixstatus_filter}, {packagetype_filter}, {output})")
    result = API_CACHE.get_or_set_json("api-get_vulnerability_details_by_image", IMAGE_CACHE_TYPE, get_vulnerability_details_by_image)

    # Filter out data by namespace and figure out number of instances
    filtered_result = []
    for r in result:
        if len(namespace_filter) == 0:
            count = len(r['instances'])
            del r['instances']
            r['num_instances'] = count
            filtered_result.append(r)
        else:
            count = 0
            for i in r['instances']:
                if i['namespace'] in namespace_filter:
                    count = count + 1
            if count > 0:
                del r['instances']
                r['num_instances'] = count
                filtered_result.append(r)
    result = filtered_result

    for r in result:
        if r['scan_status'] == "COMPLETE":
            # Go through SBOM statistics and figure out number of packages
            package_counter = 0
            for s in r['sbom_statistics']:
                if len(packagetype_filter) == 0 or s['type'] in packagetype_filter:
                    package_counter = package_counter + s['count']
            r['number_of_packages'] = package_counter

            # Create a vulnerability summary
            vuln_summary_map = {
                        "critical": 0,
                        "high": 0,
                        "low": 0,
                        "medium": 0,
                        "negligible": 0,
                        "unknown": 0
                    }
            for v in r['vulnerability_statistics']:
                severity = v['severity'].lower()
                if (len(fixstatus_filter) == 0 or v['state'] in fixstatus_filter) and (len(packagetype_filter) == 0 or v['type'] in packagetype_filter):
                    vuln_summary_map[severity] = vuln_summary_map[severity] + v['count']
            r['vulnarbility_summary'] = vuln_summary_map
        del r['sbom_statistics']
        del r['vulnerability_statistics']

    if output == "csv":
        header_row = ["image", 
                        "image_id", 
                        "num_instances", 
                        "scan_status", 
                        "cves_critical", 
                        "cves_high", 
                        "cves_medium", 
                        "cves_low", 
                        "cves_negligible", 
                        "cves_unknown", 
                        "number_of_packages"
                        ]        
        return generate_csv_response("image-summary.csv", header_row, result, vulnerability_summary_image_row_to_csv)
    else:
        return result

def vulnerability_summary_cve_row_to_csv(row):
    return [
                row['vulnerability_severity'],
                row['vulnerability_id'],
                row['artifact_name'],
                row['artifact_version'],
                row['vulnerability_fix_versions'],
                row['vulnerability_fix_state'],
                row['artifact_type'],
                row['image_count']
            ]

@app.route("/api/vulnsummary/cve")
def vulnerability_summary_cve():
    #todo - deprecate
    namespace = request.args.get('namespace')
    output = request.args.get('output')
    print(f"vulnerability_summary_cve({namespace}, {output})")
    result = get_vulnerability_summary_by_cve(namespace)

    if output == "csv":
        header_row = [
                    "vulnerability_severity",
                    "vulnerability_id",
                    "artifact_name",
                    "artifact_version",
                    "vulnerability_fix_versions",
                    "vulnerability_fix_state",
                    "artifact_type",
                    "image_count"
                    ]        
        return generate_csv_response("cve-summary.csv", header_row, result, vulnerability_summary_cve_row_to_csv)
    else:
        return result

@app.route("/api/vulnsummary/cveii")
def vulnerability_summary_cve_ii():
    namespace_filter = request_arg_to_set(request.args.get('namespace'))
    fixstatus_filter = request_arg_to_set(request.args.get('fixstatus'))
    packagetype_filter = request_arg_to_set(request.args.get('packagetype'))
    severity_filter = request_arg_to_set(request.args.get('severity'))
    output = request.args.get('output')

    result = get_vulnerability_summary_by_cve_ii()

    new_result = []
    for r in result:
        if (len(fixstatus_filter) == 0 or r['vulnerability_fix_state'] in fixstatus_filter) and (len(packagetype_filter) == 0 or r['artifact_type'] in packagetype_filter) and (len(severity_filter) == 0 or r['vulnerability_severity'] in severity_filter):
            namespace_instances = r['namespace_instances']
            tmp_set = set()
            for namespace, image_set in namespace_instances.items():
                if len(namespace_filter) == 0 or namespace in namespace_filter:
                    tmp_set.update(image_set)

            counter = len(tmp_set)
            if counter > 0:
                del r['namespace_instances']
                r['image_count'] = counter
                new_result.append(r)

    if output == "csv":
        header_row = [
                    "vulnerability_severity",
                    "vulnerability_id",
                    "artifact_name",
                    "artifact_version",
                    "vulnerability_fix_versions",
                    "vulnerability_fix_state",
                    "artifact_type",
                    "image_count"
                    ]        
        return generate_csv_response("cve-summary.csv", header_row, new_result, vulnerability_summary_cve_row_to_csv)
    else:
        return new_result

def vulnerability_summary_node_row_to_csv(row):
    if row['scan_status'] == "COMPLETE":
        return [
                    row['node_name'],
                    row['scan_status'],
                    row['distro_id'],
                    row['distro_name'],
                    row['vulnarbility_summary']['by_severity']['critical'],
                    row['vulnarbility_summary']['by_severity']['high'],
                    row['vulnarbility_summary']['by_severity']['medium'],
                    row['vulnarbility_summary']['by_severity']['low'],
                    row['vulnarbility_summary']['by_severity']['negligible'],
                    row['vulnarbility_summary']['by_severity']['unknown'],
                    row['vulnarbility_summary']['by_status']['fixed'],
                    row['vulnarbility_summary']['by_status']['not_fixed'],
                    row['vulnarbility_summary']['by_status']['unknown'],
                    row['vulnarbility_summary']['by_status']['wont_fix'],
                    row['vulnarbility_summary']['number_of_packages']
                ]
    else:
        return [
                    row['node_name'],
                    row['scan_status']
                ]

@app.route("/api/vulnsummary/node")
def api_vulnerability_summary_node():
    #todo - deprecate
    output = request.args.get('output')
    print(f"api_vulnerability_summary_node({output})")
    result = get_vulnerability_summary_by_node()
    
    if output == "csv":
        header_row = ["node_name", 
                        "scan_status", 
                        "distro_id",
                        "distro_name",
                        "cves_critical", 
                        "cves_high", 
                        "cves_medium", 
                        "cves_low", 
                        "cves_negligible", 
                        "cves_unknown", 
                        "status_fixed", 
                        "status_not_fixed", 
                        "status_unknown", 
                        "status_wont_fix", 
                        "number_of_packages"
                        ]        
        return generate_csv_response("node-summary.csv", header_row, result, vulnerability_summary_node_row_to_csv)
    else:
        return result

def vulnerability_summary_node_ii_row_to_csv(row):
    if row['scan_status'] == "COMPLETE":
        return [
                    row['node_name'],
                    row['scan_status'],
                    row['distro_id'],
                    row['distro_name'],
                    row['vulnarbility_summary']['critical'],
                    row['vulnarbility_summary']['high'],
                    row['vulnarbility_summary']['medium'],
                    row['vulnarbility_summary']['low'],
                    row['vulnarbility_summary']['negligible'],
                    row['vulnarbility_summary']['unknown'],
                    row['number_of_packages']
                ]
    else:
        return [
                    row['node_name'],
                    row['scan_status']
                ]

@app.route("/api/vulnsummary/nodeii")
def api_vulnerability_summary_node_ii():
    fixstatus_filter = request_arg_to_set(request.args.get('fixstatus'))
    packagetype_filter = request_arg_to_set(request.args.get('packagetype'))
    output = request.args.get('output')
    print(f"api_vulnerability_summary_node_ii({fixstatus_filter}, {packagetype_filter}, {output})")

    #result = get_vulnerability_summary_by_node_ii()
    result = API_CACHE.get_or_set_json("api-get_vulnerability_summary_by_node", NODE_CACHE_TYPE, get_vulnerability_summary_by_node_ii)

    for r in result:
        if r['scan_status'] == "COMPLETE":
            # Go through SBOM statistics and figure out number of packages
            package_counter = 0
            for s in r['sbom_statistics']:
                if len(packagetype_filter) == 0 or s['type'] in packagetype_filter:
                    package_counter = package_counter + s['count']
            r['number_of_packages'] = package_counter

            # Create a vulnerability summary
            vuln_summary_map = {
                        "critical": 0,
                        "high": 0,
                        "low": 0,
                        "medium": 0,
                        "negligible": 0,
                        "unknown": 0
                    }
            for v in r['vulnerability_statistics']:
                severity = v['severity'].lower()
                if (len(fixstatus_filter) == 0 or v['state'] in fixstatus_filter) and (len(packagetype_filter) == 0 or v['type'] in packagetype_filter):
                    vuln_summary_map[severity] = vuln_summary_map[severity] + v['count']
            r['vulnarbility_summary'] = vuln_summary_map
        del r['sbom_statistics']
        del r['vulnerability_statistics']

    if output == "csv":
        header_row = ["node_name", 
                        "scan_status", 
                        "distro_id",
                        "distro_name",
                        "cves_critical", 
                        "cves_high", 
                        "cves_medium", 
                        "cves_low", 
                        "cves_negligible", 
                        "cves_unknown", 
                        "number_of_packages"
                        ]        
        return generate_csv_response("node-summary.csv", header_row, result, vulnerability_summary_node_ii_row_to_csv)
    else:
        return result

def pod_summary_row_to_csv(row):
    if row['scan_status'] == "COMPLETE":
        return [
                    row['namespace'],
                    row['pod_name'],
                    row['container_name'],
                    row['image'],
                    row['image_id'],
                    row['scan_status'],
                    row['vulnarbility_summary']['by_severity']['critical'],
                    row['vulnarbility_summary']['by_severity']['high'],
                    row['vulnarbility_summary']['by_severity']['medium'],
                    row['vulnarbility_summary']['by_severity']['low'],
                    row['vulnarbility_summary']['by_severity']['negligible'],
                    row['vulnarbility_summary']['by_severity']['unknown'],
                    row['vulnarbility_summary']['by_status']['fixed'],
                    row['vulnarbility_summary']['by_status']['not_fixed'],
                    row['vulnarbility_summary']['by_status']['unknown'],
                    row['vulnarbility_summary']['by_status']['wont_fix'],
                    row['vulnarbility_summary']['number_of_packages']
                ]
    else:
        return [
                    row['namespace'],
                    row['pod_name'],
                    row['container_name'],
                    row['image'],
                    row['image_id'],
                    row['scan_status']
                ]

@app.route("/api/podsummary")
def pod_summary():
    #todo - deprecate
    namespace = request.args.get('namespace')
    output = request.args.get('output')
    print(f"pod_summary({namespace}, {output})")

    result = get_pod_summary(namespace)
    if output == "csv":
        header_row = [
                        "namespace",
                        "pod_name",
                        "container_name",
                        "image", 
                        "image_id", 
                        "scan_status", 
                        "cves_critical", 
                        "cves_high", 
                        "cves_medium", 
                        "cves_low", 
                        "cves_negligible", 
                        "cves_unknown", 
                        "status_fixed", 
                        "status_not_fixed", 
                        "status_unknown", 
                        "status_wont_fix", 
                        "number_of_packages"
                        ]        
        return generate_csv_response("pod-summary.csv", header_row, result, pod_summary_row_to_csv)
    else:
        return result

def vulnerability_summary_pod_row_to_csv(row):
    if row['scan_status'] == "COMPLETE":
        return [
                    row['namespace'],
                    row['pod_name'],
                    row['container_name'],
                    row['image'],
                    row['image_id'],
                    row['scan_status'],
                    row['vulnarbility_summary']['critical'],
                    row['vulnarbility_summary']['high'],
                    row['vulnarbility_summary']['medium'],
                    row['vulnarbility_summary']['low'],
                    row['vulnarbility_summary']['negligible'],
                    row['vulnarbility_summary']['unknown'],
                    row['number_of_packages']
                ]
    else:
        return [
                    row['namespace'],
                    row['pod_name'],
                    row['container_name'],
                    row['image'],
                    row['image_id'],
                    row['scan_status']
                ]

@app.route("/api/vulnsummary/pod")
def vulnerability_summary_pod():
    namespace_filter = request_arg_to_set(request.args.get('namespace'))
    fixstatus_filter = request_arg_to_set(request.args.get('fixstatus'))
    packagetype_filter = request_arg_to_set(request.args.get('packagetype'))
    output = request.args.get('output')
    print(f"vulnerability_summary_pod({namespace_filter}, {fixstatus_filter}, {packagetype_filter}, {output})")
    result = API_CACHE.get_or_set_json("api-get_vulnerability_details_by_pod", IMAGE_CACHE_TYPE, get_vulnerability_details_by_pod)

    # Apply namespace filter
    if len(namespace_filter) > 0:
        filtered_result = []
        for r in result:
            if r['namespace'] in namespace_filter:
                filtered_result.append(r)
        result = filtered_result

    for r in result:
        if r['scan_status'] == "COMPLETE":
            # Go through SBOM statistics and figure out number of packages
            package_counter = 0
            for s in r['sbom_statistics']:
                if len(packagetype_filter) == 0 or s['type'] in packagetype_filter:
                    package_counter = package_counter + s['count']
            r['number_of_packages'] = package_counter

            # Create a vulnerability summary
            vuln_summary_map = {
                        "critical": 0,
                        "high": 0,
                        "low": 0,
                        "medium": 0,
                        "negligible": 0,
                        "unknown": 0
                    }
            for v in r['vulnerability_statistics']:
                severity = v['severity'].lower()
                if (len(fixstatus_filter) == 0 or v['state'] in fixstatus_filter) and (len(packagetype_filter) == 0 or v['type'] in packagetype_filter):
                    vuln_summary_map[severity] = vuln_summary_map[severity] + v['count']
            r['vulnarbility_summary'] = vuln_summary_map
        del r['sbom_statistics']
        del r['vulnerability_statistics']

    if output == "csv":
        header_row = [
                        "namespace",
                        "pod_name",
                        "container_name",
                        "image", 
                        "image_id", 
                        "scan_status", 
                        "cves_critical", 
                        "cves_high", 
                        "cves_medium", 
                        "cves_low", 
                        "cves_negligible", 
                        "cves_unknown", 
                        "number_of_packages"
                        ]        
        return generate_csv_response("pod-summary.csv", header_row, result, vulnerability_summary_pod_row_to_csv)
    else:
        return result

def sbom_summary_row_to_csv(row):
    return [
                row['name'],
                row['version'],
                row['type'],
                row['image_count']
            ]

@app.route("/api/sbomsummary")
def sbom_summary():
    #todo - deprecated
    namespace = request.args.get('namespace')
    output = request.args.get('output')
    print(f"sbom_summary({namespace}, {output})")
    result = get_sbom_summary(namespace)

    if output == "csv":
        header_row = [
                        "name",
                        "version",
                        "type",
                        "image_count" 
                        ]        
        return generate_csv_response("sbom-summary.csv", header_row, result, sbom_summary_row_to_csv)
    else:
        return result

@app.route("/api/sbomsummaryii")
def sbom_summary_ii():
    namespace_filter = request_arg_to_set(request.args.get('namespace'))
    packagetype_filter = request_arg_to_set(request.args.get('packagetype'))
    output = request.args.get('output')
    print(f"sbom_summary_ii({namespace_filter}, {packagetype_filter}, {output})")
    result = get_sbom_summary_ii()

    new_result = []
    for r in result:
        if len(packagetype_filter) == 0 or r['type'] in packagetype_filter:
            namespace_instances = r['namespace_instances']
            tmp_set = set()
            for namespace, image_set in namespace_instances.items():
                if len(namespace_filter) == 0 or namespace in namespace_filter:
                    tmp_set.update(image_set)

            counter = len(tmp_set)
            if counter > 0:
                del r['namespace_instances']
                r['image_count'] = counter
                new_result.append(r)

    if output == "csv":
        header_row = [
                        "name",
                        "version",
                        "type",
                        "image_count" 
                        ]        
        return generate_csv_response("sbom-summary.csv", header_row, new_result, sbom_summary_row_to_csv)
    else:
        return new_result

@app.route("/api/hello")
def api_say_hello():
    result = {
        "result": "success"
    }
    strresult=json.dumps(result)
    print(f"api_say_hello: {strresult}")
    return strresult

@app.route("/api/image/details")
def api_image_details():
    image_id = request.args.get('imageid')
    print(f"api_image_details({image_id})")
    return get_image_details(image_id)

@app.route("/api/node/details")
def api_node_details():
    node_name = request.args.get('nodename')
    print(f"api_node_details({node_name})")
    return get_node_details(node_name)

def image_vulnerabilities_row_to_csv(row):
    return [
                row['vulnerability_severity'],
                row['vulnerability_id'],
                row['artifact_name'],
                row['artifact_version'],
                row['vulnerability_fix_versions'],
                row['vulnerability_fix_state'],
                row['artifact_type']
            ]

@app.route("/api/image/vulnerabilities")
def api_image_vulnerabilities():
    image_id = request.args.get('imageid')
    output = request.args.get('output')
    print(f"api_image_vulnerabilities({image_id} {output})")
    if image_id is None:
        return []

    result = get_image_vulnerabilties(image_id)

    if output == "csv":
        header_row = [
                    "vulnerability_severity",
                    "vulnerability_id",
                    "artifact_name",
                    "artifact_version",
                    "vulnerability_fix_versions",
                    "vulnerability_fix_state",
                    "artifact_type"
                    ]        
        return generate_csv_response("image-cve-summary.csv", header_row, result, image_vulnerabilities_row_to_csv)
    else:
        return result

@app.route("/api/node/vulnerabilities")
def api_node_vulnerabilities():
    node_name = request.args.get('nodename')
    output = request.args.get('output')
    print(f"api_node_vulnerabilities({node_name} {output})")
    if node_name is None:
        return []

    result = get_image_vulnerabilties(node_name)

    if output == "csv":
        header_row = [
                    "vulnerability_severity",
                    "vulnerability_id",
                    "artifact_name",
                    "artifact_version",
                    "vulnerability_fix_versions",
                    "vulnerability_fix_state",
                    "artifact_type"
                    ]        
        return generate_csv_response("node-cve-summary.csv", header_row, result, image_vulnerabilities_row_to_csv)
    else:
        return result

def api_image_summary_row_to_csv(row):
    return [
                row['namespace'],
                row['scanned_containers'],
                row['cves_critical'],
                row['cves_high'],
                row['cves_medium'],
                row['cves_low'],
                row['cves_negligible'],
                row['cves_unknown'],
                row['number_of_packages']
            ]

@app.route("/api/image/summary")
def api_image_summary():
    namespace = request.args.get('namespace')
    output = request.args.get('output')
    print(f"api_image_summary({namespace} {output})")
    result = get_image_summary(namespace)

    if output == "csv":
        header_row = [
                    "namespace",
                    "scanned_containers",
                    "cves_critical",
                    "cves_high",
                    "cves_medium",
                    "cves_low",
                    "cves_negligible",
                    "cves_unknown",
                    "number_of_packages"
                    ]        
        return generate_csv_response("image-namespace-summary.csv", header_row, result, api_image_summary_row_to_csv)
    else:
        return result

def api_container_distro_summary_row_to_csv(row):
    return [
                row['distro_name'],
                row['distro_id'],
                row['scanned_containers'],
                row['cves_critical'],
                row['cves_high'],
                row['cves_medium'],
                row['cves_low'],
                row['cves_negligible'],
                row['cves_unknown'],
                row['number_of_packages']
            ]

@app.route("/api/distro/container-summary")
def api_container_distro_summary():
    namespace = request.args.get('namespace')
    output = request.args.get('output')
    print(f"api_container_distro_summary({namespace} {output})")
    result = get_container_distro_summary(namespace)

    if output == "csv":
        header_row = [
                    "distro_name",
                    "distro_id",
                    "scanned_containers",
                    "cves_critical",
                    "cves_high",
                    "cves_medium",
                    "cves_low",
                    "cves_negligible",
                    "cves_unknown",
                    "number_of_packages"
                    ]        
        return generate_csv_response("container-distro-summary.csv", header_row, result, api_container_distro_summary_row_to_csv)
    else:
        return result

def api_node_distro_summary_row_to_csv(row):
    return [
                row['distro_name'],
                row['distro_id'],
                row['scanned_nodes'],
                row['cves_critical'],
                row['cves_high'],
                row['cves_medium'],
                row['cves_low'],
                row['cves_negligible'],
                row['cves_unknown'],
                row['number_of_packages']
            ]

@app.route("/api/distro/node-summary")
def api_node_distro_summary():
    output = request.args.get('output')
    print(f"api_node_distro_summary({output})")
    result = get_node_distro_summary()

    if output == "csv":
        header_row = [
                    "distro_name",
                    "distro_id",
                    "scanned_nodes",
                    "cves_critical",
                    "cves_high",
                    "cves_medium",
                    "cves_low",
                    "cves_negligible",
                    "cves_unknown",
                    "number_of_packages"
                    ]        
        return generate_csv_response("node-distro-summary.csv", header_row, result, api_node_distro_summary_row_to_csv)
    else:
        return result

def image_sbom_row_to_csv(row):
    return [
                row['name'],
                row['version'],
                row['type']
            ]

@app.route("/api/image/sbom")
def api_image_sbom():
    image_id = request.args.get('imageid')
    output = request.args.get('output')
    print(f"api_image_sbom({image_id}, {output})")
    if image_id is None:
        return []

    result = get_image_sbom(image_id)

    if output == "csv":
        header_row = [
                        "name",
                        "version",
                        "type"
                    ]        
        return generate_csv_response("image-sbom-summary.csv", header_row, result, image_sbom_row_to_csv)
    else:
        return result

@app.route("/api/node/sbom")
def api_node_sbom():
    node_name = request.args.get('nodename')
    output = request.args.get('output')
    print(f"api_node_sbom({node_name}, {output})")
    if node_name is None:
        return []

    result = get_image_sbom(node_name)

    if output == "csv":
        header_row = [
                        "name",
                        "version",
                        "type"
                    ]        
        return generate_csv_response("node-sbom-summary.csv", header_row, result, image_sbom_row_to_csv)
    else:
        return result

@app.route("/api/image/scanstatus")
def api_image_scan_status():
    namespace = request.args.get('namespace')
    print(f"api_image_scan_status({namespace})")
    return get_image_scan_status(namespace)

@app.route("/api/node/scanstatus")
def api_node_scan_status():
    print(f"api_node_scan_status()")
    return get_node_scan_status()

@app.route("/")
def index():
    print("index()")
    return "Congratulations, app up and running!\n"

@app.route("/api/clustername")
def api_get_cluster_name():
    return CLUSTER_NAME

@app.route("/api/admin/resetcontainercache")
def api_admin_reset_container_cache():
    print("api_admin_reset_container_cache()")
    reset_container_cache()
    return "Started refresh"

@app.route("/api/admin/resetnodecache")
def api_admin_reset_node_cache():
    print("api_admin_reset_node_cache()")
    reset_node_cache()
    return "Started refresh"

@app.route("/api/admin/rescanimages")
def api_admin_rescan_images():
    print("api_admin_rescan_images()")
    rescan_all_images()
    return "Started scan"

@app.route("/api/admin/rescannodes")
def api_admin_rescan_nodes():
    print("api_admin_rescan_nodes()")
    rescan_all_nodes()
    return "Started scan"

@app.route("/api/filters")
def api_get_filters():
    print("api_get_filters()")
    return get_filters()

@app.route("/api/admin/apicache/status")
def api_get_api_cache_status():
    print("api_get_api_cache_status()")
    return ApiCache().get_status()

@app.route("/api/admin/apicache/clear")
def api_get_api_cache_clear():
    print("api_get_api_cache_clear()")
    ApiCache().clear_caches()
    return "Cache cleared"

@app.route("/metrics")
def api_metrics():
    print("api_metrics")
    result = generate_metrics()
    return "\n".join(result)
