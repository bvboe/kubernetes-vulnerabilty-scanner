import queue
import threading
from file_manager import sbom_exists, store_sbom, add_to_sbom_log, add_to_sbom_error_log, call_process_sbom_script, store_scan_status
import os
from kubernetes_adapter import get_scanner_ip
import traceback
import requests
from app_status_manager import AppStatusManager
from enum import Enum
from api_cache import ApiCache, NODE_CACHE_TYPE, IMAGE_CACHE_TYPE

SCAN_QUEUE = queue.Queue()
RESCAN_IMAGE = "rescan_image"
SCAN_NEW_IMAGE = "scan_new_image"
SCAN_NEW_NODE = "scan_new_node"
RESCAN_NODE = "rescan_node"
API_CACHE = ApiCache()

Scan_Result = Enum('Scan_Result', ['SUCCESS', 'FAIL', 'BLUE'])

def init_pod_scanner():
    print("init_pod_scanner()")
    pod_scanner_thread = threading.Thread(target=scanner_worker)
    pod_scanner_thread.start()

def rescan_image(image_id):
    print(f"rescan_image({image_id})")
    scan = {
        "task": RESCAN_IMAGE,
        "image_id": image_id
    }
    SCAN_QUEUE.put(scan)

def rescan_node(node_name):
    print(f"rescan_node({node_name})")
    scan = {
        "task": RESCAN_NODE,
        "node_name": node_name
    }
    SCAN_QUEUE.put(scan)

def scan_new_image(node_name, container_id, image, image_id):
    print(f"scan_new_image({image})")
    scan = {
        "task": SCAN_NEW_IMAGE,
        "node_name": node_name, 
        "container_id": container_id, 
        "image": image, 
        "image_id": image_id
    }
    SCAN_QUEUE.put(scan)

def scan_new_node(node_name):
    print(f"scan_new_node({node_name})")
    scan = {
        "task": SCAN_NEW_NODE,
        "node_name": node_name
    }
    SCAN_QUEUE.put(scan)

def scanner_worker():
    print("scanner_worker()")
    app_status_manager = AppStatusManager()

    while app_status_manager.is_running():
        try:
            scan_task = SCAN_QUEUE.get(timeout=5)
            #print(scan_task)
            do_process_scan_task(scan_task)
            SCAN_QUEUE.task_done()
        except queue.Empty:
            None
            #print("Queue is empty, worker is waiting for tasks.")
        except Exception as e:
            print(f"Worker encountered an exception: {e}")
            traceback.print_exc()
    print("scanner_worker() Shutdown")

def do_process_scan_task(scan_task):
    print("do_process_scan_task()")
    task = scan_task['task']
    if task == SCAN_NEW_IMAGE:
        do_scan_new_image(scan_task)
    elif task == RESCAN_IMAGE:
        do_rescan_image(scan_task['image_id'])
    elif task == SCAN_NEW_NODE:
        do_scan_new_node(scan_task['node_name'])
    elif task == RESCAN_NODE:
        do_rescan_node(scan_task['node_name'])
    else:
        print(f"Error, unknown task {task}")

def do_rescan_image(image_id):
    print(f"do_rescan_image({image_id})")
    if sbom_exists(image_id):
        call_process_sbom_script(image_id)
        API_CACHE.clear_caches(IMAGE_CACHE_TYPE)

def do_rescan_node(node_name):
    print(f"do_rescan_node({node_name})")

    sbom = load_node_sbom(node_name)
    if sbom:
        print(f"do_scan_new_node - Got SBOM for {node_name}, store it")
        store_sbom(node_name, sbom)
        add_to_sbom_log("node", node_name)
        print(f"do_rescan_node - do post processing and scanning for {node_name}")
        call_process_sbom_script(node_name)
        API_CACHE.clear_caches(NODE_CACHE_TYPE)
        #store_scan_status(node_name, "COMPLETE")
    else:
        print(f"do_rescan_node - No SBOM for {node_name}, ignoring")
        add_to_sbom_error_log("node", node_name)    

def do_scan_new_image(scan_task):
    print("do_scan_new_image()")
    node_name = scan_task['node_name']
    container_id = scan_task['container_id']
    image = scan_task['image']
    image_id = scan_task['image_id']
    if sbom_exists(image_id) == False:
        print("No sbom, load one!!!!")
        store_scan_status(image_id, "SCANNING")
        sbom = load_sbom(node_name, container_id, image, image_id)
        if sbom:
            print(f"do_scan_new_image - Got SBOM for {image}, store it")
            store_sbom(image_id, sbom)
            add_to_sbom_log("image", image, image_id)
            print(f"do_scan_new_image - do post processing and scanning for {image}")
            call_process_sbom_script(image_id)
            #store_scan_status(image_id, "COMPLETE")
            API_CACHE.clear_caches(IMAGE_CACHE_TYPE)
        else:
            print(f"do_scan_new_image - No SBOM for {image}, ignoring")
            add_to_sbom_error_log("image", node_name, image, image_id)    

def do_scan_new_node(node_name):
    print(f"do_scan_new_node({node_name})")
    if sbom_exists(node_name) == False:
        print("No sbom, load one!!!!")
        store_scan_status(node_name, "SCANNING")
        sbom = load_node_sbom(node_name)
        if sbom:
            print(f"do_scan_new_node - Got SBOM for {node_name}, store it")
            store_sbom(node_name, sbom)
            add_to_sbom_log("node", node_name)
            print(f"do_scan_new_node - do post processing and scanning for {node_name}")
            call_process_sbom_script(node_name)
            #store_scan_status(node_name, "COMPLETE")
            API_CACHE.clear_caches(NODE_CACHE_TYPE)
        else:
            print(f"do_process_scan_task - No SBOM for {node_name}, ignoring")
            add_to_sbom_error_log("node", node_name)    
    
def load_sbom(node_name, container_id, image, image_id):
    print("load_sbom()")
    scanner_ip = get_scanner_ip(node_name)
    print(f"load_sbom scanner ip: {scanner_ip}")
    if scanner_ip is None:
        # Returning nothing if we have nowhere to call
        print(f"load_sbom failed to scan image on node {node_name}")
        store_scan_status(image_id, "NO_SCAN_AVAILABLE")
        return None
    
    # Call SBOM Service
    url = f"http://{scanner_ip}:8080/image-sbom"
    params = {"image_id": image_id, "image": image, "container_id": container_id}

    try:
        # Send a GET request to the service
        print("load_sbom - Start scan")
        response = requests.get(url, params=params)
        
        # Check if the request was successful
        if response.status_code == 200:
            # Parse the JSON response
            data = response.json()
            if data['result'] == "success":
                print(f"load_sbom result: successful for {image}")
                return data['sbom']
            else:
                print(f"load_sbom result: failed for {image}")
                store_scan_status(image_id, "SCAN_FAILED")
                return None
        else:
            print(f"Failed with status code: {response.status_code}")
            store_scan_status(image_id, "SCAN_FAILED")
            return None
    except requests.exceptions.RequestException as e:
        # Handle any errors that occur during the request
        print(f"Request failed: {e}")
        traceback.print_exc()
        store_scan_status(image_id, "SCAN_FAILED")
        return None

def load_node_sbom(node_name):
    print(f"load_node_sbom({node_name})")
    scanner_ip = get_scanner_ip(node_name)
    print(f"load_node_sbom scanner ip: {scanner_ip}")
    if scanner_ip is None:
        # Returning nothing if we have nowhere to call
        store_scan_status(node_name, "NO_SCAN_AVAILABLE")
        print(f"load_node_sbom Failed to scan node {node_name}")
        return None
    

    # Call SBOM Service
    url = f"http://{scanner_ip}:8080/host-sbom"

    try:
        # Send a GET request to the service
        print(f"load_node_sbom Start scan {node_name}")
        response = requests.get(url)
        
        # Check if the request was successful
        if response.status_code == 200:
            # Parse the JSON response
            data = response.json()
            if data['result'] == "success":
                print(f"load_sbom result: successful for {node_name}")
                return data['sbom']
            else:
                print(f"load_sbom result: failed for {node_name}")
                store_scan_status(node_name, "SCAN_FAILED")
                return None
        else:
            print(f"Failed with status code: {response.status_code}")
            store_scan_status(node_name, "SCAN_FAILED")
            return None
    except requests.exceptions.RequestException as e:
        # Handle any errors that occur during the request
        print(f"Request failed: {e}")
        traceback.print_exc()
        store_scan_status(node_name, "SCAN_FAILED")
        return None

def retrieve_current_scanner_db_metadata():
    # Call SBOM Service
    url = "https://toolbox-data.anchore.io/grype/databases/listing.json"

    try:
        # Send a GET request to the service
        response = requests.get(url)
        
        # Check if the request was successful
        if response.status_code == 200:
            # Parse the JSON response
            return response.json()
        else:
            print(f"Failed with status code: {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        # Handle any errors that occur during the request
        print(f"Request failed: {e}")
        traceback.print_exc()
        return None
