from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger
import atexit
import os

CACHE_REFRESH_MINUTE_INTERVAL = int(os.getenv("CACHE_REFRESH_MINUTE_INTERVAL"))
FORCE_RESCAN_MINUTE_INTERVAL = int(os.getenv("FORCE_RESCAN_MINUTE_INTERVAL"))

def rescan_all_containers_job():
    from vulnerability_coordinator import rescan_all_images
    print("rescan_all_containers_job()")
    rescan_all_images()

def refresh_container_cache_job():
    from vulnerability_coordinator import reset_scanner_cache
    print("refresh_container_cache_job()")
    reset_scanner_cache()

def init_scheduler():
    print("init_scheduler()")
    print(f"rescan_all_containers_job every {FORCE_RESCAN_MINUTE_INTERVAL} minutes")
    print(f"refresh_container_cache_job every {CACHE_REFRESH_MINUTE_INTERVAL} minutes")

    scheduler = BackgroundScheduler()
    scheduler.add_job(func=rescan_all_containers_job, 
                        trigger=IntervalTrigger(minutes=FORCE_RESCAN_MINUTE_INTERVAL), 
                        id='rescan_all_containers_job', 
                        name='Rescan all containers for vulnerabilities', 
                        replace_existing=True)
    scheduler.add_job(func=refresh_container_cache_job, 
                        trigger=IntervalTrigger(minutes=CACHE_REFRESH_MINUTE_INTERVAL), 
                        id='refresh_container_cache_job', 
                        name='Refresh the container cache', 
                        replace_existing=True)

    scheduler.start()
    atexit.register(lambda: scheduler.shutdown())


