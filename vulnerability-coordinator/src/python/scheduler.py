from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger
import atexit
import os

CACHE_REFRESH_MINUTE_INTERVAL = int(os.getenv("CACHE_REFRESH_MINUTE_INTERVAL"))
CHECK_REMOTE_SCANNER_METADATA_INTERVAL = int(os.getenv("CHECK_REMOTE_SCANNER_METADATA_INTERVAL"))

def refresh_cache_job():
    from vulnerability_coordinator import reset_container_cache, reset_node_cache
    print("refresh_container_cache_job()")
    reset_container_cache()
    reset_node_cache()

def init_scanner_db_metadata():
    print("init_scanner_db_metadata()")
    from file_manager import load_scanner_database_metadata_from_disk, store_scanner_database_metadata
    from pod_scanner import retrieve_current_scanner_db_metadata
    #Ensure we have scanner metadata locally
    if load_scanner_database_metadata_from_disk() is None:
        print("init_scanner_db_metadata(), no metadata, init")
        # Load it and store it
        metadata = retrieve_current_scanner_db_metadata()
        store_scanner_database_metadata(metadata)
    else:
        print("init_scanner_db_metadata(), metadata exists, ignore")

def check_remote_scanner_db_change_job():
    print("check_remote_scanner_db_change_job()")
    from file_manager import load_scanner_database_metadata_from_disk, store_scanner_database_metadata, append_to_log_file
    from pod_scanner import retrieve_current_scanner_db_metadata
    from vulnerability_coordinator import rescan_all_images, rescan_all_nodes
    current_metadata = load_scanner_database_metadata_from_disk()
    latest_metadata = retrieve_current_scanner_db_metadata()

    if current_metadata != latest_metadata:
        print("check_remote_scanner_db_change_job() - data changed, trigger refresh")
        append_to_log_file("check_remote_scanner_db_change_job() - data changed, trigger refresh", "check_remote_scanner_db_change_job.log")
        store_scanner_database_metadata(latest_metadata)
        #Trigger refresh!!!!!
        rescan_all_images()
        rescan_all_nodes()
    else:
        print("check_remote_scanner_db_change_job() - No change, do nothing")
        append_to_log_file("check_remote_scanner_db_change_job() - No change, do nothing", "check_remote_scanner_db_change_job.log")

def init_scheduler():
    print("init_scheduler()")
    print(f"refresh_container_cache_job every {CACHE_REFRESH_MINUTE_INTERVAL} minutes")
    print(f"check_remote_scanner_db_change_job every {CHECK_REMOTE_SCANNER_METADATA_INTERVAL} minutes")

    init_scanner_db_metadata()

    scheduler = BackgroundScheduler()
    scheduler.add_job(func=refresh_cache_job, 
                        trigger=IntervalTrigger(minutes=CACHE_REFRESH_MINUTE_INTERVAL), 
                        id='refresh_cache_job', 
                        name='Refresh the cache', 
                        replace_existing=True)
    scheduler.add_job(func=check_remote_scanner_db_change_job, 
                        trigger=IntervalTrigger(minutes=CHECK_REMOTE_SCANNER_METADATA_INTERVAL), 
                        id='check_remote_scanner_db_change_job', 
                        name='Check if scanner DB has changed', 
                        replace_existing=True)

    scheduler.start()
    atexit.register(lambda: scheduler.shutdown())
