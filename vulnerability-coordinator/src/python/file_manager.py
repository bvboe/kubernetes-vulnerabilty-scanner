import os
from datetime import datetime
import subprocess
import json

DATA_DIRECTORY = os.getenv("DATA_DIRECTORY")
SBOM_FILENAME = "sbom.json"

#Create directory
os.makedirs(DATA_DIRECTORY, exist_ok=True)

def generate_path(image_id, filename):
    return DATA_DIRECTORY+"/"+image_id+"/"+filename

def sbom_exists(image_id):
    print(f"sbom_exists({image_id})")
    file_path=generate_path(image_id, SBOM_FILENAME)
    return os.path.isfile(file_path)

def store_sbom(image_id, sbom):
    print(f"store_sbom({image_id}, ...)")
    #Create directory if it doesn't exist
    sbom_directory = DATA_DIRECTORY + "/" + image_id
    sbom_file = sbom_directory + "/" + SBOM_FILENAME
    os.makedirs(sbom_directory, exist_ok=True)
    with open(sbom_file, 'w') as file:
        # Write SBOM
        file.write(sbom)

def add_to_sbom_log(image, image_id):
    timestamp_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    log_string = (f"{timestamp_str}: {image} {image_id}\n")
    log_file = DATA_DIRECTORY+"/sbom.log"
    with open(log_file, 'a') as file:
        # Write log
        file.write(log_string)

def add_to_sbom_error_log(node_name, image, image_id):
    timestamp_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    log_string = (f"{timestamp_str}: {node_name} {image} {image_id}\n")
    log_file = DATA_DIRECTORY+"/sbom-err.log"
    with open(log_file, 'a') as file:
        # Write log
        file.write(log_string)

def call_process_sbom_script(image_id):
    print(f"call_process_sbom_script({image_id})")
    directory = DATA_DIRECTORY + "/"+image_id
    try:
        script_call = ["./process_sbom.sh", directory]
        result = subprocess.run(script_call, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, check=True, timeout=120)
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"Command failed with return code {e.returncode}")
        print(f"Command output:\n{e.output}")
        print(f"Command error:\n{e.stderr}")
    except FileNotFoundError:
        print("The specified command was not found.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

def load_vulnerability_summary(conainer_id):
    print(f"load_vulnerability_summary({conainer_id})")
    str_result = load_container_file(conainer_id, "vulnerability-scan-summary.json")
    if str_result is None:
        return {}
    else:
        return json.loads(str_result)

def load_vulnerability_scan(container_id):
    print(f"load_vulnerability_scan({container_id})")
    str_result = load_container_file(container_id, "vulnerability-scan-short.json")
    if str_result is None:
        #Scan doesn't exist, that's ok, return None as an empty scan result would be an empty array
        return None
    else:
        return json.loads(str_result)


def load_container_file(container_id, file_name):
    print(f"load_container_file({container_id}, {file_name})")
    file_path = DATA_DIRECTORY + "/" + container_id + "/" + file_name
    print(f"Load file {file_path}")

    try:
        with open(file_path, 'r') as file:
            result = file.read()
            #print(result)
            return result
    except FileNotFoundError:
        # No file, return None
        #print(f"The file {file_path} does not exist.")
        return None

def load_sbom(container_id):
    print(f"load_sbom({container_id})")

    str_result = load_container_file(container_id, "sbom-short.json")
    if str_result is None:
        #Scan doesn't exist, that's ok, return None as an empty scan result would be an empty array
        return None
    else:
        return json.loads(str_result)
