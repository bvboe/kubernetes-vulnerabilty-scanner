import os
from datetime import datetime
import subprocess
import json

SCAN_DATA_DIRECTORY = os.getenv("SCAN_DATA_DIRECTORY")
CACHE_DIRECTORY = os.getenv("CACHE_DIRECTORY")
LOG_DIRECTORY = os.getenv("LOG_DIRECTORY")

SBOM_FILENAME = "sbom.json"
STATUS_FILENAME = "status.txt"
NO_DISTRO_NAME = "None"

#Create directories
os.makedirs(SCAN_DATA_DIRECTORY, exist_ok=True)
os.makedirs(CACHE_DIRECTORY, exist_ok=True)
os.makedirs(LOG_DIRECTORY, exist_ok=True)

def generate_path(image_id, filename):
    return SCAN_DATA_DIRECTORY+"/"+image_id+"/"+filename

def sbom_exists(image_id):
    print(f"sbom_exists({image_id})")
    file_path=generate_path(image_id, SBOM_FILENAME)
    return os.path.isfile(file_path)

def store_sbom(image_id, sbom):
    print(f"store_sbom({image_id}, ...)")
    #Create directory if it doesn't exist
    sbom_directory = SCAN_DATA_DIRECTORY + "/" + image_id
    sbom_file = sbom_directory + "/" + SBOM_FILENAME
    os.makedirs(sbom_directory, exist_ok=True)
    with open(sbom_file, 'w') as file:
        # Write SBOM
        file.write(sbom)

def store_scan_status(image_id, status):
    print(f"store_scan_status({image_id}, {status})")
    #Create directory if it doesn't exist
    status_directory = SCAN_DATA_DIRECTORY + "/" + image_id
    status_file = status_directory + "/" + STATUS_FILENAME
    os.makedirs(status_directory, exist_ok=True)
    with open(status_file, 'w') as file:
        # Write status
        file.write(status)

def load_scan_status(image_id):
    #print(f"load_scan_status({image_id})")
    scan_status = load_container_file(image_id, STATUS_FILENAME)
    if scan_status == None:
        return "TO_BE_SCANNED"
    else:
        return scan_status

def add_to_sbom_log(*strings):
    log_message = " ".join(strings)
    append_to_log_file(log_message, "sbom.log")

def add_to_sbom_error_log(*strings):
    log_message = " ".join(strings)
    append_to_log_file(log_message, "sbom-err.log")

def append_to_log_file(log_message, filename):
    timestamp_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_string = (f"{timestamp_str}: {log_message}\n")
    log_file = LOG_DIRECTORY + "/" + filename
    with open(log_file, 'a') as file:
        # Write log
        file.write(log_string)

def call_process_sbom_script(image_id):
    print(f"call_process_sbom_script({image_id})")
    directory = SCAN_DATA_DIRECTORY + "/"+image_id
    try:
        script_call = ["./process_sbom.sh", directory]
        result = subprocess.run(script_call, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, check=True)
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"Command failed with return code {e.returncode}")
        print(f"Command output:\n{e.output}")
        print(f"Command error:\n{e.stderr}")
    except FileNotFoundError:
        print("The specified command was not found.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

def call_generate_shared_data_script():
    print(f"call_generate_shared_data_script()")
    try:
        script_call = ["./update_shared_metadata.sh", SCAN_DATA_DIRECTORY, CACHE_DIRECTORY]
        result = subprocess.run(script_call, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, check=True)
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"Command failed with return code {e.returncode}")
        print(f"Command output:\n{e.output}")
        print(f"Command error:\n{e.stderr}")
    except FileNotFoundError:
        print("The specified command was not found.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

def load_vulnerability_summary(container_id):
    #print(f"load_vulnerability_summary({container_id})")
    str_result = load_container_file(container_id, "vulnerability-scan-summary.json")
    if str_result is None:
        return {}
    else:
        return json.loads(str_result)

def load_vulnerability_scan(container_id):
    #print(f"load_vulnerability_scan({container_id})")
    str_result = load_container_file(container_id, "vulnerability-scan-short.json")
    if str_result is None:
        #Scan doesn't exist, that's ok, return None as an empty scan result would be an empty array
        return None
    else:
        return json.loads(str_result)


def load_container_file(container_id, file_name):
    #print(f"load_container_file({container_id}, {file_name})")
    file_path = SCAN_DATA_DIRECTORY + "/" + container_id + "/" + file_name
    #print(f"Load file {file_path}")

    return load_file(file_path)

def load_shared_metadata():
    print("load_shared_metadata()")
    return json.loads(load_file(CACHE_DIRECTORY + "/metadata.json"))

def load_file(file_path):
    try:
        with open(file_path, 'r') as file:
            result = file.read()
            #print(result)
            return result
    except FileNotFoundError:
        # No file, return None
        #print(f"The file {file_path} does not exist.")
        return None

def load_sbom(container_id):
    #print(f"load_sbom({container_id})")

    str_result = load_container_file(container_id, "sbom-short.json")
    if str_result is None:
        #Scan doesn't exist, that's ok, return None as an empty scan result would be an empty array
        return None
    else:
        return json.loads(str_result)

def load_sbom_summary(container_id):
    #print(f"load_sbom_summary({container_id})")
    str_result = load_container_file(container_id, "sbom-summary.json")

    if str_result is None:
        #SBOM doesn't exist, that's ok, return None as an empty scan result would be an empty array
        return None
    else:
        return json.loads(str_result)

def get_distro_name(container_id):
    sbom_summary = load_sbom_summary(container_id)
    if sbom_summary is None:
        return NO_DISTRO_NAME

    if sbom_summary.get('distro') is None:
        return NO_DISTRO_NAME

    if sbom_summary['distro'].get('prettyName') is None:
        return NO_DISTRO_NAME

    return sbom_summary['distro']['prettyName']

def load_scanner_database_metadata_from_disk():
    print("load_scanner_database_metadata_from_disk()")
    result = load_file(CACHE_DIRECTORY + "/" + "grype-db-metadata.json")
    if result is None:
        return None
    else:
        return json.loads(result)

def store_scanner_database_metadata(metadata):
    with open(CACHE_DIRECTORY + "/" + "grype-db-metadata.json", 'w') as file:
        # Write log
        file.write(json.dumps(metadata))
