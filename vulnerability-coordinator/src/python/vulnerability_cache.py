import threading
import json

class Container:
    __slots__ = ['_namespace', '_pod_name', '_container_name']

    def __init__(self, namespace, pod_name, container_name):
        super().__setattr__('_namespace', namespace)
        super().__setattr__('_pod_name', pod_name)
        super().__setattr__('_container_name', container_name)

    @property
    def namespace(self):
        return self._namespace

    @property
    def pod_name(self):
        return self._pod_name

    @property
    def container_name(self):
        return self._container_name

    def __setattr__(self, name, value):
        raise AttributeError(f"Cannot modify immutable attribute '{name}'")

    def __delattr__(self, name):
        raise AttributeError(f"Cannot delete immutable attribute '{name}'")

    def __eq__(self, other):
        if isinstance(other, Container):
            return self._namespace == other._namespace and self._pod_name == other._pod_name and self._container_name == other._container_name
        return False

    def __hash__(self):
        return hash((self._namespace, self._pod_name, self._container_name))

    def get_dict(self):
        return {
            "namespace": self.namespace,
            "pod_name": self.pod_name,
            "container_name": self.container_name
        }

    def __str__(self):
        return json.dumps(self.get_dict())

class ContainerImage:
    __slots__ = ['_image', '_image_id']

    def __init__(self, image, image_id):
        super().__setattr__('_image', image)
        super().__setattr__('_image_id', image_id)

    @property
    def image(self):
        return self._image

    @property
    def image_id(self):
        return self._image_id

    def __setattr__(self, name, value):
        raise AttributeError(f"Cannot modify immutable attribute '{name}'")

    def __delattr__(self, name):
        raise AttributeError(f"Cannot delete immutable attribute '{name}'")

    def __eq__(self, other):
        if isinstance(other, ContainerImage):
            return self._image == other._image and self._image_id == other._image_id
        return False

    def __hash__(self):
        return hash((self._image, self._image_id))

    def get_dict(self):
        return {
            "image": self.image,
            "image_id": self.image_id
        }

    def __str__(self):
        return json.dumps(self.get_dict())

class VulnerabilityCache:
    cache = {}
    lock = threading.Lock()

    def add(self, key, value):
        with self.lock:
            self.cache[key] = value

    def remove(self, key):
        with self.lock:
            self.cache.pop(key, None)

    def get_copy(self):
        with self.lock:
            return self.cache.copy()
    
    def get_values(self):
        with self.lock:
            return list(self.cache.values())
    
    def get_keys(self):
        with self.lock:
            return set(self.cache.keys())
    
    def replace_cache(self, new_cache):
        with self.lock:
            self.cache.clear()
            self.cache.update(new_cache)
