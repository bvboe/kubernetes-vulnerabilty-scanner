from kubernetes_adapter import get_all_running_containers, init_pod_change_listener
from pod_scanner import scan_image, init_pod_scanner
from file_manager import load_vulnerability_summary, load_vulnerability_scan, load_sbom
import json

RUNNING_CONTAINERS = {}

class Container:
    __slots__ = ['_namespace', '_pod_name', '_container_name']

    def __init__(self, namespace, pod_name, container_name):
        super().__setattr__('_namespace', namespace)
        super().__setattr__('_pod_name', pod_name)
        super().__setattr__('_container_name', container_name)

    @property
    def namespace(self):
        return self._namespace

    @property
    def pod_name(self):
        return self._pod_name

    @property
    def container_name(self):
        return self._container_name

    def __setattr__(self, name, value):
        raise AttributeError(f"Cannot modify immutable attribute '{name}'")

    def __delattr__(self, name):
        raise AttributeError(f"Cannot delete immutable attribute '{name}'")

    def __eq__(self, other):
        if isinstance(other, Container):
            return self._namespace == other._namespace and self._pod_name == other._pod_name and self._container_name == other._container_name
        return False

    def __hash__(self):
        return hash((self._namespace, self._pod_name, self._container_name))

    def get_dict(self):
        return {
            "namespace": self.namespace,
            "pod_name": self.pod_name,
            "container_name": self.container_name
        }

    def __str__(self):
        return json.dumps(self.get_dict())

class ContainerImage:
    __slots__ = ['_image', '_image_id']

    def __init__(self, image, image_id):
        super().__setattr__('_image', image)
        super().__setattr__('_image_id', image_id)

    @property
    def image(self):
        return self._image

    @property
    def image_id(self):
        return self._image_id

    def __setattr__(self, name, value):
        raise AttributeError(f"Cannot modify immutable attribute '{name}'")

    def __delattr__(self, name):
        raise AttributeError(f"Cannot delete immutable attribute '{name}'")

    def __eq__(self, other):
        if isinstance(other, ContainerImage):
            return self._image == other._image and self._image_id == other._image_id
        return False

    def __hash__(self):
        return hash((self._image, self._image_id))

    def get_dict(self):
        return {
            "image": self.image,
            "image_id": self.image_id
        }

    def __str__(self):
        return json.dumps(self.get_dict())

def init_scanner():
    print("init_scanner()")
    running_containers = get_all_running_containers()

    new_running_containers={}
    for running_container in running_containers:
        #print(running_container)
        container = Container(running_container["namespace"], running_container["pod_name"], running_container["container_name"])
        container_instance = ContainerImage(running_container["image"], running_container["image_id"])
        new_running_containers[container] = container_instance
        scan_image(running_container["node_name"], running_container["container_id"], running_container["image"], running_container["image_id"])

    RUNNING_CONTAINERS.update(new_running_containers)

    #Init the listener after we've setup our initial cache
    init_pod_change_listener(updated_container_callback)
    #Init the pod scanner
    init_pod_scanner()

def updated_container_callback(container_info):
    print(f"updated_container_callback({container_info})")
    #print(f"updated_container_callback()")
    event = container_info["event"]
    #print(event)
    if event == "ADDED" or event == "MODIFIED":
    #if event == "MODIFIED":
        print("Add or modify existing container")
        container = Container(container_info["namespace"], container_info["pod_name"], container_info["container_name"])
        container_instance=ContainerImage(container_info["image"], container_info["image_id"])
        RUNNING_CONTAINERS[container] = container_instance
        scan_image(container_info["node_name"], container_info["container_id"], container_info["image"], container_info["image_id"])
    elif event == "DELETED":
        print("Delete container")
        container = Container(container_info["namespace"], container_info["pod_name"], container_info["container_name"])
        del RUNNING_CONTAINERS[container]
    else:
        print(f"ERROR updated_container_callback(), unkown event {event}")

def get_vulnerability_summary_by_container(namespace):
    print(f"get_vulnerability_summary_by_container({namespace})")
    """
    Key:
    {
        image: ...,
        image_id:...
    }
    Value
    {
        vulnarbility_summary:
        container_instances: [
         namespace: ...,
         pod_name: ...,
         container_name: ...
        ]
    }
    """
    tmp_result = {}

    for container, container_image in RUNNING_CONTAINERS.items():
        if namespace is None or namespace == container.namespace:
            container_dict = container.get_dict()
            key = container_image
            if key in tmp_result:
                #Add container to existing resultset
                print("Add container to existing resultset")
                value = tmp_result[key]
                value["container_instances"].append(container_dict)
            else:
                #Create a new result
                print("Create entry to returnset")
                vulnerability_summary = load_vulnerability_summary(container_image.image_id)
                value = {
                    "vulnarbility_summary": vulnerability_summary,
                    "container_instances": [container_dict]
                }
                tmp_result[key] = value


    """
    [
        {
            image:
            image_id
            vulnarbility_summary:
            container_instances: [
            namespace: ...,
            pod_name: ...,
            container_name: ...
            ]
        }
    ]

    """
    result = []
    for container_image, details in tmp_result.items():
        r = {
            "image": container_image.image,
            "image_id": container_image.image_id,
            "vulnarbility_summary": details['vulnarbility_summary'],
            "container_instances": details['container_instances']
        }
        result.append(r)


    return result

def get_namespaces():
    print("get_namespaces()")

    result_set = set()
    for container in RUNNING_CONTAINERS.keys():
        result_set.add(container.namespace)

    return sorted(result_set)

def get_vulnerability_summary_by_cve(namespace):
    print(f"get_vulnerability_summary_by_cve({namespace})")
    #Build a set of all the container id's we'll be going through
    container_id_set = set()
    for container, container_image in RUNNING_CONTAINERS.items():
        if namespace is None or namespace == container.namespace:
            container_id_set.add(container_image.image_id)

    result_map = {}
    # Load scan for each container
    for container_id in container_id_set:
        print(f"Scan container {container_id}")
        cves = load_vulnerability_scan(container_id)
        if cves is None:
            print(f"Missing scan for image {container_id}, moving on")
        else:
            # Create a typle that identifies the vulnerability
            for cve in cves:
                #print(json.dumps(cve))
                tuple_key = (
                            cve['artifact']['name'],
                            cve['artifact']['version'],
                            cve['artifact']['type'],
                            cve['vulnerability']['id'],
                            cve['vulnerability']['severity'],
                            ", ".join(cve['vulnerability']['fix']['versions']),
                            cve['vulnerability']['fix']['state']
                            )
                if tuple_key in result_map:
                    counter = result_map[tuple_key]
                    counter = counter + 1
                    result_map[tuple_key] = counter
                else:
                    result_map[tuple_key] = 1

    result = []
    for tuple_key, counter in result_map.items():
        row = {
            "artifact_name": tuple_key[0],
            "artifact_version": tuple_key[1],
            "artifact_type": tuple_key[2],
            "vulnerability_id": tuple_key[3],
            "vulnerability_severity": tuple_key[4],
            "vulnerability_fix_versions": tuple_key[5],
            "vulnerability_fix_state": tuple_key[6],
            "image_count": counter
        }
        result.append(row)
    
    return result
                
def get_sbom_summary(namespace):
    print(f"get_sbom_summary{namespace}")

    #Build a set of all the container id's we'll be going through
    container_id_set = set()
    for container, container_image in RUNNING_CONTAINERS.items():
        if namespace is None or namespace == container.namespace:
            container_id_set.add(container_image.image_id)

    result_map = {}
    # Load SBOM for each container
    for container_id in container_id_set:
        print(f"Load SBOM for container {container_id}")
        sbom = load_sbom(container_id)
        if sbom is None:
            print(f"Missing sbom for image {container_id}, moving on")
        else:
            # Create a typle that identifies the vulnerability
            for artifact in sbom:
                #print(json.dumps(cve))
                tuple_key = (
                            artifact['name'],
                            artifact['version'],
                            artifact['type']
                            )
                if tuple_key in result_map:
                    counter = result_map[tuple_key]
                    counter = counter + 1
                    result_map[tuple_key] = counter
                else:
                    result_map[tuple_key] = 1

    result = []
    for tuple_key, counter in result_map.items():
        row = {
            "name": tuple_key[0],
            "version": tuple_key[1],
            "type": tuple_key[2],
            "image_count": counter
        }
        result.append(row)
    
    return result

def get_pod_summary(namespace):
    print(f"get_pod_summary{namespace}")
    result = []

    for container, container_image in RUNNING_CONTAINERS.items():
        if namespace is None or namespace == container.namespace:
            vulnerability_summary = load_vulnerability_summary(container_image.image_id)
            value = {
                "namespace": container.namespace,
                "pod_name": container.pod_name,
                "container_name": container.container_name,
                "vulnarbility_summary": vulnerability_summary
            }
            result.append(value)

    return result
