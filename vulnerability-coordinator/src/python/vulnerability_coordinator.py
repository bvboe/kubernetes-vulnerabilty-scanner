from kubernetes_adapter import get_all_running_containers, init_pod_change_listener
from pod_scanner import scan_new_image, init_pod_scanner, rescan_image
from file_manager import load_vulnerability_summary, load_vulnerability_scan, load_sbom, load_scan_status
from scheduler import init_scheduler
import json
import signal
import sys
from app_status_manager import AppStatusManager
from vulnerability_cache import Container, ContainerImage, VulnerabilityCache

RUNNING_CONTAINER_CACHE = VulnerabilityCache()

def reset_scanner_cache():
    print("reset_scanner_cache")
    running_containers = get_all_running_containers()

    new_running_containers={}
    for running_container in running_containers:
        container = Container(running_container["namespace"], running_container["pod_name"], running_container["container_name"])
        container_instance = ContainerImage(running_container["image"], running_container["image_id"])
        new_running_containers[container] = container_instance
        scan_new_image(running_container["node_name"], running_container["container_id"], running_container["image"], running_container["image_id"])

    #Clear and insert new items
    RUNNING_CONTAINER_CACHE.replace_cache(new_running_containers)

def handle_shutdown_signal(signum, frame):
    print(f"handle_shutdown_signal() Received termination signal: {signum}")
    app_status_manager = AppStatusManager()
    app_status_manager.set_is_running(False)
    sys.exit(0)  # Exiting gracefully

def init_scanner():
    print("init_scanner()")
    signal.signal(signal.SIGTERM, handle_shutdown_signal)
    #Init the cache
    reset_scanner_cache()

    #Init the listener after we've setup our initial cache
    init_pod_change_listener(updated_container_callback)
    #Init the scheduler
    init_scheduler()
    #Init the pod scanner
    init_pod_scanner()

def updated_container_callback(container_info):
    print(f"updated_container_callback({container_info})")
    #print(f"updated_container_callback()")
    cache_event = container_info["cache_event"]
    #print(event)
    if cache_event == "ADD":
        print("Add or modify existing container")
        container = Container(container_info["namespace"], container_info["pod_name"], container_info["container_name"])
        container_instance=ContainerImage(container_info["image"], container_info["image_id"])
        RUNNING_CONTAINER_CACHE.add(container, container_instance)
        scan_new_image(container_info["node_name"], container_info["container_id"], container_info["image"], container_info["image_id"])
    elif cache_event == "DELETE":
        print("Delete container")
        container = Container(container_info["namespace"], container_info["pod_name"], container_info["container_name"])
        RUNNING_CONTAINER_CACHE.remove(container)
    else:
        print(f"ERROR updated_container_callback(), unkown event {cache_event}")

def sort_vulnerability_summary_by_container(item):
    mapping={
        "COMPLETE": "1",
        "SCANNING": "2",
        "NO_SCAN_AVAILABLE": "3",
        "SCAN_FAILED": "4",
        "TO_BE_SCANNED": "5"
    }

    return mapping[item['scan_status']] + item['image']

def get_vulnerability_summary_by_container(namespace):
    print(f"get_vulnerability_summary_by_container({namespace})")

    tmp_result = {}
    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        if namespace is None or namespace == container.namespace:
            container_dict = container.get_dict()
            key = container_image
            if key in tmp_result:
                #Add container to existing resultset
                #print("Add container to existing resultset")
                value = tmp_result[key]
                value["num_container_instances"] = value["num_container_instances"] + 1
            else:
                #Create a new result
                #print("Create entry to returnset")
                vulnerability_summary = load_vulnerability_summary(container_image.image_id)
                scan_status = load_scan_status(container_image.image_id)
                value = {
                    "vulnarbility_summary": vulnerability_summary,
                    "num_container_instances": 1,
                    "scan_status": scan_status
                }
                tmp_result[key] = value


    result = []
    for container_image, details in tmp_result.items():
        r = {
            "image": container_image.image,
            "image_id": container_image.image_id,
            "num_container_instances": details['num_container_instances'],
            "scan_status": details['scan_status'],
            "vulnarbility_summary": details['vulnarbility_summary']
        }
        result.append(r)

    result.sort(key=sort_vulnerability_summary_by_container)
    return result

def get_namespaces():
    print("get_namespaces()")

    result_set = set()
    for container in RUNNING_CONTAINER_CACHE.get_keys():
        result_set.add(container.namespace)

    return sorted(result_set)

def sort_vulnerability_summary_cve(item):
    mapping={
        "Critical": "1",
        "High": "2",
        "Medium": "3",
        "Low": "4",
        "Negligible": "5",
        "Unknown": "6"
    }

    return mapping[item['vulnerability_severity']]+item['vulnerability_id']+item['artifact_name']+item['artifact_version']

def get_vulnerability_summary_by_cve(namespace):
    print(f"get_vulnerability_summary_by_cve({namespace})")
    #Build a set of all the container id's we'll be going through
    container_id_set = set()
    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        if namespace is None or namespace == container.namespace:
            container_id_set.add(container_image.image_id)

    result_map = {}
    # Load scan for each container
    for container_id in container_id_set:
        print(f"Scan container {container_id}")
        cves = load_vulnerability_scan(container_id)
        if cves is None:
            print(f"Missing scan for image {container_id}, moving on")
        else:
            # Create a typle that identifies the vulnerability
            for cve in cves:
                #print(json.dumps(cve))
                tuple_key = (
                            cve['artifact']['name'],
                            cve['artifact']['version'],
                            cve['artifact']['type'],
                            cve['vulnerability']['id'],
                            cve['vulnerability']['severity'],
                            ", ".join(cve['vulnerability']['fix']['versions']),
                            cve['vulnerability']['fix']['state']
                            )
                if tuple_key in result_map:
                    counter = result_map[tuple_key]
                    counter = counter + 1
                    result_map[tuple_key] = counter
                else:
                    result_map[tuple_key] = 1

    result = []
    for tuple_key, counter in result_map.items():
        row = {
            "artifact_name": tuple_key[0],
            "artifact_version": tuple_key[1],
            "artifact_type": tuple_key[2],
            "vulnerability_id": tuple_key[3],
            "vulnerability_severity": tuple_key[4],
            "vulnerability_fix_versions": tuple_key[5],
            "vulnerability_fix_state": tuple_key[6],
            "image_count": counter
        }
        result.append(row)
    
    result.sort(key=sort_vulnerability_summary_cve)
    return result

def sort_sbom_summary(item):
    return (item['name']+item['version']).lower();

def get_sbom_summary(namespace):
    print(f"get_sbom_summary({namespace})")

    #Build a set of all the container id's we'll be going through
    container_id_set = set()
    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        if namespace is None or namespace == container.namespace:
            container_id_set.add(container_image.image_id)

    result_map = {}
    # Load SBOM for each container
    for container_id in container_id_set:
        #print(f"Load SBOM for container {container_id}")
        sbom = load_sbom(container_id)
        if sbom is None:
            print(f"Missing sbom for image {container_id}, moving on")
        else:
            # Create a typle that identifies the vulnerability
            for artifact in sbom:
                #print(json.dumps(cve))
                tuple_key = (
                            artifact['name'],
                            artifact['version'],
                            artifact['type']
                            )
                if tuple_key in result_map:
                    counter = result_map[tuple_key]
                    counter = counter + 1
                    result_map[tuple_key] = counter
                else:
                    result_map[tuple_key] = 1

    result = []
    for tuple_key, counter in result_map.items():
        row = {
            "name": tuple_key[0],
            "version": tuple_key[1],
            "type": tuple_key[2],
            "image_count": counter
        }
        result.append(row)
    
    result.sort(key=sort_sbom_summary)
    return result

def sort_pod_summary(item):
    mapping={
        "COMPLETE": "1",
        "SCANNING": "2",
        "NO_SCAN_AVAILABLE": "3",
        "SCAN_FAILED": "4",
        "TO_BE_SCANNED": "5"
    }
    return mapping[item['scan_status']]+item['namespace']+item['pod_name']+item['container_name']

def get_pod_summary(namespace):
    print(f"get_pod_summary{namespace}")
    result = []

    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        if namespace is None or namespace == container.namespace:
            vulnerability_summary = load_vulnerability_summary(container_image.image_id)
            scan_status = load_scan_status(container_image.image_id)
            value = {
                "namespace": container.namespace,
                "pod_name": container.pod_name,
                "container_name": container.container_name,
                "image": container_image.image,
                "image_id": container_image.image_id,
                "scan_status": scan_status,
                "vulnarbility_summary": vulnerability_summary
            }
            result.append(value)

    result.sort(key=sort_pod_summary)
    return result

def sort_image_summary(item):
    return item['namespace']+item['pod_name']+item['container_name']

def get_image_summary(image_id):
    print(f"get_image_summary({image_id})")

    repositories = set()
    instances = []
    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        #print(container_image.image_id)
        if container_image.image_id == image_id:
            repositories.add(container_image.image)
            instances.append(container.get_dict())

    repository_list = list(repositories)
    repository_list.sort()
    instances.sort(key=sort_image_summary)
    scan_status = load_scan_status(image_id)
    result = {
        "image_id": image_id,
        "repositories": repository_list,
        "instances": instances,
        "scan_status": scan_status
    }

    return result

def get_image_vulnerabilties(image_id):
    print(f"get_image_summary({image_id})")

    data = load_vulnerability_scan(image_id)
    if data is None:
        return []

    result = []
    # Create a typle that identifies the vulnerability
    for cve in data:
        row = {
            "artifact_name": cve['artifact']['name'],
            "artifact_version": cve['artifact']['version'],
            "artifact_type": cve['artifact']['type'],
            "vulnerability_id": cve['vulnerability']['id'],
            "vulnerability_severity": cve['vulnerability']['severity'],
            "vulnerability_fix_versions": ", ".join(cve['vulnerability']['fix']['versions']),
            "vulnerability_fix_state": cve['vulnerability']['fix']['state']
        }
        result.append(row)
    result.sort(key=sort_vulnerability_summary_cve)
    return result

def sort_sbom_summary(item):
    return (item['name']+item['version']).lower();

def get_image_sbom(image_id):
    print(f"get_image_sbom({image_id})")

    data = load_sbom(image_id)
    if data is None:
        return []
    else:
        data.sort(key=sort_sbom_summary)
        return data

def rescan_all_images():
    print("rescan_all_images()")

    image_id_set = set()

    for images in RUNNING_CONTAINER_CACHE.get_values():
        image_id_set.add(images.image_id)

    for image_id in image_id_set:
        rescan_image(image_id)
