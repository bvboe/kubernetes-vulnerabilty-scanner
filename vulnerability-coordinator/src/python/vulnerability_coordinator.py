from kubernetes_adapter import get_all_running_containers, init_pod_change_listener, get_all_running_nodes, init_node_change_listener
from pod_scanner import scan_new_image, init_pod_scanner, rescan_image, scan_new_node, rescan_node
from file_manager import load_vulnerability_summary, load_vulnerability_scan, load_sbom, load_scan_status, get_distro_name, load_sbom_summary, load_shared_metadata
from scheduler import init_scheduler
import json
import signal
import sys
from app_status_manager import AppStatusManager
from container_cache import Container, ContainerImage, ContainerCache
from node_cache import NodeCache

RUNNING_CONTAINER_CACHE = ContainerCache()
RUNNING_NODE_CACHE = NodeCache()

def reset_container_cache():
    print("reset_container_cache")
    running_containers = get_all_running_containers()

    new_running_containers={}
    for running_container in running_containers:
        container = Container(running_container["namespace"], running_container["pod_name"], running_container["container_name"])
        container_instance = ContainerImage(running_container["image"], running_container["image_id"])
        new_running_containers[container] = container_instance
        scan_new_image(running_container["node_name"], running_container["container_id"], running_container["image"], running_container["image_id"])

    #Clear and insert new items
    RUNNING_CONTAINER_CACHE.replace_cache(new_running_containers)

def reset_node_cache():
    print("reset_node_cache")
    running_nodes = get_all_running_nodes()

    for node_name in running_nodes:
        scan_new_node(node_name)

    RUNNING_NODE_CACHE.replace_cache(running_nodes)

def handle_shutdown_signal(signum, frame):
    print(f"handle_shutdown_signal() Received termination signal: {signum}")
    app_status_manager = AppStatusManager()
    app_status_manager.set_is_running(False)
    sys.exit(0)  # Exiting gracefully

def init_scanner():
    print("init_scanner()")
    signal.signal(signal.SIGTERM, handle_shutdown_signal)
    #Init the container cache
    reset_container_cache()

    #Init the node cache
    reset_node_cache()

    #Init the listener after we've setup our initial cache
    init_pod_change_listener(updated_container_callback)
    init_node_change_listener(updated_node_callback)
    #Init the scheduler
    init_scheduler()
    #Init the pod scanner
    init_pod_scanner()

def updated_container_callback(container_info):
    print(f"updated_container_callback({container_info})")
    #print(f"updated_container_callback()")
    cache_event = container_info["cache_event"]
    #print(event)
    if cache_event == "ADD":
        print("Add or modify existing container")
        container = Container(container_info["namespace"], container_info["pod_name"], container_info["container_name"])
        container_instance=ContainerImage(container_info["image"], container_info["image_id"])
        RUNNING_CONTAINER_CACHE.add(container, container_instance)
        scan_new_image(container_info["node_name"], container_info["container_id"], container_info["image"], container_info["image_id"])
    elif cache_event == "DELETE":
        print("Delete container")
        container = Container(container_info["namespace"], container_info["pod_name"], container_info["container_name"])
        RUNNING_CONTAINER_CACHE.remove(container)
    else:
        print(f"ERROR updated_container_callback(), unkown event {cache_event}")

def updated_node_callback(node_info):
    print(f"updated_node_callback({node_info})")
    cache_event = node_info["cache_event"]
    node_name = node_info["node_name"]
    if cache_event == "ADD":
        RUNNING_NODE_CACHE.add(node_name)
        #print(f"updated_node_callback - Added {node_name}")
        scan_new_node(node_name)
    elif cache_event == "DELETE":
        RUNNING_NODE_CACHE.discard(node_name)
        #print(f"updated_node_callback - Deleted {node_name}")
    else:
        print(f"ERROR updated_node_callback(), unkown event {cache_event}")

def sort_vulnerability_summary_by_container(item):
    mapping={
        "COMPLETE": "1",
        "SCANNING": "2",
        "NO_SCAN_AVAILABLE": "3",
        "SCAN_FAILED": "4",
        "TO_BE_SCANNED": "5"
    }

    return mapping[item['scan_status']] + item['image']

def get_vulnerability_summary_by_container(namespace):
    #Todo - deprecate
    print(f"get_vulnerability_summary_by_container({namespace})")

    tmp_result = {}
    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        if namespace is None or namespace == container.namespace:
            container_dict = container.get_dict()
            key = container_image
            if key in tmp_result:
                #Add container to existing resultset
                #print("Add container to existing resultset")
                value = tmp_result[key]
                value["num_container_instances"] = value["num_container_instances"] + 1
            else:
                #Create a new result
                #print("Create entry to returnset")
                vulnerability_summary = load_vulnerability_summary(container_image.image_id)
                scan_status = load_scan_status(container_image.image_id)
                value = {
                    "vulnarbility_summary": vulnerability_summary,
                    "num_container_instances": 1,
                    "scan_status": scan_status
                }
                tmp_result[key] = value


    result = []
    for container_image, details in tmp_result.items():
        r = {
            "image": container_image.image,
            "image_id": container_image.image_id,
            "num_container_instances": details['num_container_instances'],
            "scan_status": details['scan_status'],
            "vulnarbility_summary": details['vulnarbility_summary']
        }
        result.append(r)

    result.sort(key=sort_vulnerability_summary_by_container)
    return result

def get_vulnerability_details_by_image():
    print("get_vulnerability_details_by_image")
    tmp_result = {}
    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        if container_image in tmp_result:
            #Add container to existing resultset
            #print("Add container to existing resultset")
            value = tmp_result[container_image]
            value["instances"].append(container.get_dict())
        else:
            #Create a new result
            #print("Create entry to returnset")
            scan_status = load_scan_status(container_image.image_id)
            sbom = None
            vulnerabilities = None
            if scan_status == "COMPLETE":
                sbom = load_sbom(container_image.image_id)
                vulnerabilities = load_vulnerability_scan(container_image.image_id)
            value = {
                "instances": [container.get_dict()],
                "scan_status": scan_status,
                "sbom": sbom,
                "vulnerabilities": vulnerabilities
            }
            tmp_result[container_image] = value

    result = []
    for container_image, details in tmp_result.items():
        r = {
            "image": container_image.image,
            "image_id": container_image.image_id,
            "scan_status": details['scan_status'],
            "sbom": details['sbom'],
            "vulnerabilities": details['vulnerabilities'],
            "instances": details['instances']
        }
        result.append(r)

    result.sort(key=sort_vulnerability_summary_by_container)
    return result

def get_namespaces():
    print("get_namespaces()")

    result_set = set()
    for container in RUNNING_CONTAINER_CACHE.get_keys():
        result_set.add(container.namespace)

    return sorted(result_set)

def sort_vulnerability_summary_cve(item):
    mapping={
        "Critical": "1",
        "High": "2",
        "Medium": "3",
        "Low": "4",
        "Negligible": "5",
        "Unknown": "6"
    }

    return mapping[item['vulnerability_severity']]+item['vulnerability_id']+item['artifact_name']+item['artifact_version']

def get_vulnerability_summary_by_cve(namespace):
    # todo - deprecate
    print(f"get_vulnerability_summary_by_cve({namespace})")
    #Build a set of all the container id's we'll be going through
    container_id_set = set()
    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        if namespace is None or namespace == container.namespace:
            container_id_set.add(container_image.image_id)

    result_map = {}
    # Load scan for each container
    for container_id in container_id_set:
        print(f"Scan container {container_id}")
        cves = load_vulnerability_scan(container_id)
        if cves is None:
            print(f"Missing scan for image {container_id}, moving on")
        else:
            # Create a tuple that identifies the vulnerability
            for cve in cves:
                #print(json.dumps(cve))
                tuple_key = (
                            cve['artifact']['name'],
                            cve['artifact']['version'],
                            cve['artifact']['type'],
                            cve['vulnerability']['id'],
                            cve['vulnerability']['severity'],
                            ", ".join(cve['vulnerability']['fix']['versions']),
                            cve['vulnerability']['fix']['state']
                            )
                if tuple_key in result_map:
                    counter = result_map[tuple_key]
                    counter = counter + 1
                    result_map[tuple_key] = counter
                else:
                    result_map[tuple_key] = 1

    result = []
    for tuple_key, counter in result_map.items():
        row = {
            "artifact_name": tuple_key[0],
            "artifact_version": tuple_key[1],
            "artifact_type": tuple_key[2],
            "vulnerability_id": tuple_key[3],
            "vulnerability_severity": tuple_key[4],
            "vulnerability_fix_versions": tuple_key[5],
            "vulnerability_fix_state": tuple_key[6],
            "image_count": counter
        }
        result.append(row)
    
    result.sort(key=sort_vulnerability_summary_cve)
    return result

def get_vulnerability_summary_by_cve_ii():
    print("get_vulnerability_summary_by_cve_ii()")
    # Figure out what images we have and in what namespaces they're running
    image_info_map = {}
    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        namespace = container.namespace
        image_id = container_image.image_id
        if image_id not in image_info_map:
            image_info_map[image_id] = set()
        
        namespace_set = image_info_map[image_id]
        namespace_set.add(namespace)

    # Load scan for each container
    result_map = {}
    for image_id, namespace_set in image_info_map.items():
        print(f"Load scan data for image {image_id}")
        cves = load_vulnerability_scan(image_id)
        if cves is None:
            print(f"Missing scan for image {image_id}, moving on")
        else:
            # Create a tuple that identifies the vulnerability
            for cve in cves:
                #print(json.dumps(cve))
                tuple_key = (
                            cve['artifact']['name'],
                            cve['artifact']['version'],
                            cve['artifact']['type'],
                            cve['vulnerability']['id'],
                            cve['vulnerability']['severity'],
                            ", ".join(cve['vulnerability']['fix']['versions']),
                            cve['vulnerability']['fix']['state']
                            )

                if tuple_key not in result_map:
                    result_map[tuple_key] = {}
                
                tuple_namespace_count_map = result_map[tuple_key]
                for n in namespace_set:
                    if n in tuple_namespace_count_map:
                        tuple_namespace_count_map[n].add(image_id)
                    else:
                        tuple_namespace_count_map[n] = {image_id}

    result = []
    for tuple_key, namespace_instances in result_map.items():
        row = {
            "artifact_name": tuple_key[0],
            "artifact_version": tuple_key[1],
            "artifact_type": tuple_key[2],
            "vulnerability_id": tuple_key[3],
            "vulnerability_severity": tuple_key[4],
            "vulnerability_fix_versions": tuple_key[5],
            "vulnerability_fix_state": tuple_key[6],
            "namespace_instances": namespace_instances
        }
        result.append(row)

    result.sort(key=sort_vulnerability_summary_cve)
    return result

def sort_vulnerability_summary_by_node(item):
    mapping={
        "COMPLETE": "1",
        "SCANNING": "2",
        "NO_SCAN_AVAILABLE": "3",
        "SCAN_FAILED": "4",
        "TO_BE_SCANNED": "5"
    }

    return mapping[item['scan_status']] + item['node_name']

def get_vulnerability_summary_by_node():
    #todo - deprecate
    print(f"get_vulnerability_summary_by_node()")

    result = []
    for node_name in RUNNING_NODE_CACHE.get_copy():
        scan_status = load_scan_status(node_name)
        if scan_status == "COMPLETE":
            vulnerability_summary = load_vulnerability_summary(node_name)
            sbom_summary = load_sbom_summary(node_name)
            distro_id = get_distro_field(sbom_summary, 'id')
            distro_name = get_distro_field(sbom_summary, 'prettyName')
        else:
            vulnerability_summary = None
            distro_id = None
            distro_name = None

        value = {
            "node_name": node_name,
            "distro_id": distro_id,
            "distro_name": distro_name,
            "vulnarbility_summary": vulnerability_summary,
            "scan_status": scan_status
        }
        result.append(value)

    result.sort(key=sort_vulnerability_summary_by_node)
    return result

def get_vulnerability_summary_by_node_ii():
    print("get_vulnerability_summary_by_node_ii")

    result = []
    for node_name in RUNNING_NODE_CACHE.get_copy():
        scan_status = load_scan_status(node_name)
        if scan_status == "COMPLETE":
            sbom = load_sbom(node_name)
            vulnerabilities = load_vulnerability_scan(node_name)
            sbom_summary = load_sbom_summary(node_name)
            distro_id = get_distro_field(sbom_summary, 'id')
            distro_name = get_distro_field(sbom_summary, 'prettyName')
        else:
            sbom = None
            vulnerabilities = None
            distro_id = None
            distro_name = None

        value = {
            "node_name": node_name,
            "distro_id": distro_id,
            "distro_name": distro_name,
            "scan_status": scan_status,
            "vulnerabilities": vulnerabilities,
            "sbom": sbom
        }
        result.append(value)

    result.sort(key=sort_vulnerability_summary_by_node)
    return result    

def sort_sbom_summary(item):
    return (item['name']+item['version']).lower();

def get_sbom_summary(namespace):
    #todo - deprecated
    print(f"get_sbom_summary({namespace})")

    #Build a set of all the container id's we'll be going through
    container_id_set = set()
    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        if namespace is None or namespace == container.namespace:
            container_id_set.add(container_image.image_id)

    result_map = {}
    # Load SBOM for each container
    for container_id in container_id_set:
        #print(f"Load SBOM for container {container_id}")
        sbom = load_sbom(container_id)
        if sbom is None:
            print(f"Missing sbom for image {container_id}, moving on")
        else:
            # Create a typle that identifies the item
            for artifact in sbom:
                #print(json.dumps(cve))
                tuple_key = (
                            artifact['name'],
                            artifact['version'],
                            artifact['type']
                            )
                if tuple_key in result_map:
                    counter = result_map[tuple_key]
                    counter = counter + 1
                    result_map[tuple_key] = counter
                else:
                    result_map[tuple_key] = 1

    result = []
    for tuple_key, counter in result_map.items():
        row = {
            "name": tuple_key[0],
            "version": tuple_key[1],
            "type": tuple_key[2],
            "image_count": counter
        }
        result.append(row)
    
    result.sort(key=sort_sbom_summary)
    return result

def get_sbom_summary_ii():
    print(f"get_sbom_summary_ii()")

    # Figure out what images we have and in what namespaces they're running
    image_info_map = {}
    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        namespace = container.namespace
        image_id = container_image.image_id
        if image_id not in image_info_map:
            image_info_map[image_id] = set()
        
        namespace_set = image_info_map[image_id]
        namespace_set.add(namespace)

    # Load scan for each container
    result_map = {}
    for image_id, namespace_set in image_info_map.items():
        print(f"Load scan data for image {image_id}")
        sbom = load_sbom(image_id)
        if sbom is None:
            print(f"Missing sbom for image {image_id}, moving on")
        else:
            # Create a tuple that identifies the vulnerability
            for artifact in sbom:
                #print(json.dumps(cve))
                tuple_key = (
                            artifact['name'],
                            artifact['version'],
                            artifact['type']
                            )

                if tuple_key not in result_map:
                    result_map[tuple_key] = {}
                
                tuple_namespace_count_map = result_map[tuple_key]
                for n in namespace_set:
                    if n in tuple_namespace_count_map:
                        tuple_namespace_count_map[n].add(image_id)
                    else:
                        tuple_namespace_count_map[n] = {image_id}

    result = []
    for tuple_key, namespace_instances in result_map.items():
        row = {
            "name": tuple_key[0],
            "version": tuple_key[1],
            "type": tuple_key[2],
            "namespace_instances": namespace_instances
        }
        result.append(row)

    result.sort(key=sort_sbom_summary)
    return result

def sort_pod_summary(item):
    mapping={
        "COMPLETE": "1",
        "SCANNING": "2",
        "NO_SCAN_AVAILABLE": "3",
        "SCAN_FAILED": "4",
        "TO_BE_SCANNED": "5"
    }
    return mapping[item['scan_status']]+item['namespace']+item['pod_name']+item['container_name']

def get_pod_summary(namespace):
    #Todo - deprecate
    print(f"get_pod_summary{namespace}")
    result = []

    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        if namespace is None or namespace == container.namespace:
            vulnerability_summary = load_vulnerability_summary(container_image.image_id)
            scan_status = load_scan_status(container_image.image_id)
            value = {
                "namespace": container.namespace,
                "pod_name": container.pod_name,
                "container_name": container.container_name,
                "image": container_image.image,
                "image_id": container_image.image_id,
                "scan_status": scan_status,
                "vulnarbility_summary": vulnerability_summary
            }
            result.append(value)

    result.sort(key=sort_pod_summary)
    return result

def get_vulnerability_details_by_pod():
    print(f"get_vulnerability_details_by_pod")
    result = []
    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        scan_status = load_scan_status(container_image.image_id)
        sbom = None
        vulnerabilities = None
        if scan_status == "COMPLETE":
            sbom = load_sbom(container_image.image_id)
            vulnerabilities = load_vulnerability_scan(container_image.image_id)

        value = {
            "namespace": container.namespace,
            "pod_name": container.pod_name,
            "container_name": container.container_name,
            "image": container_image.image,
            "image_id": container_image.image_id,
            "scan_status": scan_status,
            "sbom": sbom,
            "vulnerabilities": vulnerabilities
        }
        result.append(value)

    result.sort(key=sort_pod_summary)
    return result

def sort_image_summary(item):
    return item['namespace']+item['pod_name']+item['container_name']

def get_image_details(image_id):
    print(f"get_image_details({image_id})")

    repositories = set()
    instances = []
    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        #print(container_image.image_id)
        if container_image.image_id == image_id:
            repositories.add(container_image.image)
            instances.append(container.get_dict())

    repository_list = list(repositories)
    repository_list.sort()
    instances.sort(key=sort_image_summary)
    scan_status = load_scan_status(image_id)
    distro_name = "Unknown"
    if scan_status == "COMPLETE":
        distro_name = get_distro_name(image_id)
        
    result = {
        "image_id": image_id,
        "repositories": repository_list,
        "instances": instances,
        "scan_status": scan_status,
        "distro_name": distro_name
    }

    return result

def get_node_details(node_name):
    print(f"get_node_details({node_name})")

    scan_status = load_scan_status(node_name)
    distro_name = "Unknown"
    if scan_status == "COMPLETE":
        distro_name = get_distro_name(node_name)
        
    result = {
        "node_name": node_name,
        "scan_status": scan_status,
        "distro_name": distro_name
    }

    return result

def get_image_vulnerabilties(image_id):
    print(f"get_image_vulnerabilties({image_id})")

    data = load_vulnerability_scan(image_id)
    if data is None:
        return []

    result = []
    # Create a typle that identifies the vulnerability
    for cve in data:
        row = {
            "artifact_name": cve['artifact']['name'],
            "artifact_version": cve['artifact']['version'],
            "artifact_type": cve['artifact']['type'],
            "vulnerability_id": cve['vulnerability']['id'],
            "vulnerability_severity": cve['vulnerability']['severity'],
            "vulnerability_fix_versions": ", ".join(cve['vulnerability']['fix']['versions']),
            "vulnerability_fix_state": cve['vulnerability']['fix']['state']
        }
        result.append(row)
    result.sort(key=sort_vulnerability_summary_cve)
    return result

def sort_image_summary(item):
    return item['namespace']

def get_image_summary(namespace):
    print(f"get_image_summary({namespace})")

    result_map = {}
    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        if namespace is None or namespace == container.namespace:
            scan_status = load_scan_status(container_image.image_id)
            if scan_status == "COMPLETE":
                container_namespace = container.namespace
                vulnerability_summary = load_vulnerability_summary(container_image.image_id)
                if container_namespace in result_map:
                    #Increment numbers
                    curr_value = result_map[container_namespace]
                    tmp_value = {
                        "scanned_containers": curr_value['scanned_containers'] + 1,
                        "cves_critical": curr_value['cves_critical'] + vulnerability_summary['by_severity']['critical'],
                        "cves_high": curr_value['cves_high'] + vulnerability_summary['by_severity']['high'],
                        "cves_medium": curr_value['cves_medium'] + vulnerability_summary['by_severity']['medium'],
                        "cves_low": curr_value['cves_low'] + vulnerability_summary['by_severity']['low'],
                        "cves_negligible": curr_value['cves_negligible'] + vulnerability_summary['by_severity']['negligible'],
                        "cves_unknown": curr_value['cves_unknown'] + vulnerability_summary['by_severity']['unknown'],
                        "number_of_packages": curr_value['number_of_packages'] + vulnerability_summary['number_of_packages']
                    }
                else:
                    #Init result
                    tmp_value = {
                        "scanned_containers": 1,
                        "cves_critical": vulnerability_summary['by_severity']['critical'],
                        "cves_high": vulnerability_summary['by_severity']['high'],
                        "cves_medium": vulnerability_summary['by_severity']['medium'],
                        "cves_low": vulnerability_summary['by_severity']['low'],
                        "cves_negligible": vulnerability_summary['by_severity']['negligible'],
                        "cves_unknown": vulnerability_summary['by_severity']['unknown'],
                        "number_of_packages": vulnerability_summary['number_of_packages']
                    }

                result_map[container_namespace] = tmp_value

    result = []
    for ns, data in result_map.items():
        row = {
            "namespace": ns,
            **data
        }
        result.append(row)
    result.sort(key=sort_image_summary)
    return result

def sort_distro_summary(item):
    return item['distro_name']

def get_distro_field(sbom_summary, field):
    if sbom_summary.get('distro') is None:
        return "None"

    if sbom_summary['distro'].get(field) is None:
        return "None"

    return sbom_summary['distro'][field]

def get_container_distro_summary(namespace):
    print(f"get_container_distro_summary({namespace})")

    result_map = {}
    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        if namespace is None or namespace == container.namespace:
            scan_status = load_scan_status(container_image.image_id)
            if scan_status == "COMPLETE":
                vulnerability_summary = load_vulnerability_summary(container_image.image_id)
                sbom_summary = load_sbom_summary(container_image.image_id)
                distro_id = get_distro_field(sbom_summary, 'id')

                tmp_value = {}
                if distro_id in result_map:
                    # Update data
                    curr_value = result_map[distro_id]
                    tmp_value = {
                        "distro_name": curr_value['distro_name'],
                        "scanned_containers": curr_value['scanned_containers'] + 1,
                        "cves_critical": curr_value['cves_critical'] + vulnerability_summary['by_severity']['critical'],
                        "cves_high": curr_value['cves_high'] + vulnerability_summary['by_severity']['high'],
                        "cves_medium": curr_value['cves_medium'] + vulnerability_summary['by_severity']['medium'],
                        "cves_low": curr_value['cves_low'] + vulnerability_summary['by_severity']['low'],
                        "cves_negligible": curr_value['cves_negligible'] + vulnerability_summary['by_severity']['negligible'],
                        "cves_unknown": curr_value['cves_unknown'] + vulnerability_summary['by_severity']['unknown'],
                        "number_of_packages": curr_value['number_of_packages'] + vulnerability_summary['number_of_packages']
                    }
                else:
                    tmp_value = {
                        "distro_name": get_distro_field(sbom_summary, 'prettyName'),
                        "scanned_containers": 1,
                        "cves_critical": vulnerability_summary['by_severity']['critical'],
                        "cves_high": vulnerability_summary['by_severity']['high'],
                        "cves_medium": vulnerability_summary['by_severity']['medium'],
                        "cves_low": vulnerability_summary['by_severity']['low'],
                        "cves_negligible": vulnerability_summary['by_severity']['negligible'],
                        "cves_unknown": vulnerability_summary['by_severity']['unknown'],
                        "number_of_packages": vulnerability_summary['number_of_packages']
                    }

                result_map[distro_id] = tmp_value

    result = []
    for distid, data in result_map.items():
        row = {
            "distro_id": distid,
            **data
        }
        result.append(row)
    result.sort(key=sort_distro_summary)
    return result

def get_node_distro_summary():
    print(f"get_node_distro_summary()")

    result_map = {}
    for node_name in RUNNING_NODE_CACHE.get_copy():
        scan_status = load_scan_status(node_name)
        if scan_status == "COMPLETE":
            vulnerability_summary = load_vulnerability_summary(node_name)
            sbom_summary = load_sbom_summary(node_name)
            distro_id = get_distro_field(sbom_summary, 'id')

            tmp_value = {}
            if distro_id in result_map:
                # Update data
                curr_value = result_map[distro_id]
                tmp_value = {
                    "distro_name": curr_value['distro_name'],
                    "scanned_nodes": curr_value['scanned_nodes'] + 1,
                    "cves_critical": curr_value['cves_critical'] + vulnerability_summary['by_severity']['critical'],
                    "cves_high": curr_value['cves_high'] + vulnerability_summary['by_severity']['high'],
                    "cves_medium": curr_value['cves_medium'] + vulnerability_summary['by_severity']['medium'],
                    "cves_low": curr_value['cves_low'] + vulnerability_summary['by_severity']['low'],
                    "cves_negligible": curr_value['cves_negligible'] + vulnerability_summary['by_severity']['negligible'],
                    "cves_unknown": curr_value['cves_unknown'] + vulnerability_summary['by_severity']['unknown'],
                    "number_of_packages": curr_value['number_of_packages'] + vulnerability_summary['number_of_packages']
                }
            else:
                tmp_value = {
                    "distro_name": get_distro_field(sbom_summary, 'prettyName'),
                    "scanned_nodes": 1,
                    "cves_critical": vulnerability_summary['by_severity']['critical'],
                    "cves_high": vulnerability_summary['by_severity']['high'],
                    "cves_medium": vulnerability_summary['by_severity']['medium'],
                    "cves_low": vulnerability_summary['by_severity']['low'],
                    "cves_negligible": vulnerability_summary['by_severity']['negligible'],
                    "cves_unknown": vulnerability_summary['by_severity']['unknown'],
                    "number_of_packages": vulnerability_summary['number_of_packages']
                }

            result_map[distro_id] = tmp_value

    result = []
    for distid, data in result_map.items():
        row = {
            "distro_id": distid,
            **data
        }
        result.append(row)
    result.sort(key=sort_distro_summary)
    return result

def sort_sbom_summary(item):
    return (item['name']+item['version']).lower()

def get_image_sbom(image_id):
    print(f"get_image_sbom({image_id})")

    data = load_sbom(image_id)
    if data is None:
        return []
    else:
        data.sort(key=sort_sbom_summary)
        return data

def rescan_all_images():
    print("rescan_all_images()")

    image_id_set = set()

    for images in RUNNING_CONTAINER_CACHE.get_values():
        image_id_set.add(images.image_id)

    for image_id in image_id_set:
        rescan_image(image_id)

def rescan_all_nodes():
    print("rescan_all_nodes()")

    for node_name in RUNNING_NODE_CACHE.get_copy():
        rescan_node(node_name)

def get_image_scan_status(namespace):
    print(f"get_image_scan_status({namespace})")

    all_statuses = ["COMPLETE", "SCANNING", "TO_BE_SCANNED", "NO_SCAN_AVAILABLE", "SCAN_FAILED"]

    result_map = {}

    for s in all_statuses:
        result_map[s] = 0

    for container, container_image in RUNNING_CONTAINER_CACHE.get_copy().items():
        if namespace is None or namespace == container.namespace:
            scan_status = load_scan_status(container_image.image_id)
            if scan_status in result_map:
                counter = result_map[scan_status]
                result_map[scan_status] = counter + 1
            else:
                result_map[scan_status] = 1

    result = {}
    for status, counter in result_map.items():
        result = {
            status: counter,
            **result
        }

    return result

def get_node_scan_status():
    print("get_node_scan_status")

    all_statuses = ["COMPLETE", "SCANNING", "TO_BE_SCANNED", "NO_SCAN_AVAILABLE", "SCAN_FAILED"]

    result_map = {}

    for s in all_statuses:
        result_map[s] = 0

    for node_name in RUNNING_NODE_CACHE.get_copy():
        scan_status = load_scan_status(node_name)
        if scan_status in result_map:
            counter = result_map[scan_status]
            result_map[scan_status] = counter + 1
        else:
            result_map[scan_status] = 1

    result = {}
    for status, counter in result_map.items():
        result = {
            status: counter,
            **result
        }

    return result

def get_filters():
    print("get_filters")
    result = load_shared_metadata()
    result['namespaces'] = get_namespaces()

    return result